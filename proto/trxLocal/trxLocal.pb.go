// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: trxLocal.proto

package trxLocal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *MyResponse) Reset() {
	*x = MyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyResponse) ProtoMessage() {}

func (x *MyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyResponse.ProtoReflect.Descriptor instead.
func (*MyResponse) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{0}
}

func (x *MyResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type TrxMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo              string                  `protobuf:"bytes,1,opt,name=DocNo,proto3" json:"DocNo,omitempty"`
	PartnerCode        string                  `protobuf:"bytes,2,opt,name=PartnerCode,proto3" json:"PartnerCode,omitempty"`
	FirstName          string                  `protobuf:"bytes,3,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName           string                  `protobuf:"bytes,4,opt,name=LastName,proto3" json:"LastName,omitempty"`
	RoleType           string                  `protobuf:"bytes,5,opt,name=RoleType,proto3" json:"RoleType,omitempty"`
	PhoneNumber        string                  `protobuf:"bytes,6,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	Email              string                  `protobuf:"bytes,7,opt,name=Email,proto3" json:"Email,omitempty"`
	Active             string                  `protobuf:"bytes,8,opt,name=Active,proto3" json:"Active,omitempty"`
	ActiveAt           string                  `protobuf:"bytes,9,opt,name=ActiveAt,proto3" json:"ActiveAt,omitempty"`
	NonActiveAt        *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=NonActiveAt,proto3" json:"NonActiveAt,omitempty"` // Untuk tipe yang opsional atau bisa nil/null, Anda mungkin ingin menggunakan "google.protobuf.StringValue" atau mekanisme serupa tergantung pada kebutuhan Anda.
	OuId               int64                   `protobuf:"varint,11,opt,name=OuId,proto3" json:"OuId,omitempty"`
	TypePartner        string                  `protobuf:"bytes,12,opt,name=TypePartner,proto3" json:"TypePartner,omitempty"`
	CardNumber         string                  `protobuf:"bytes,13,opt,name=CardNumber,proto3" json:"CardNumber,omitempty"`
	VehicleNumber      string                  `protobuf:"bytes,14,opt,name=VehicleNumber,proto3" json:"VehicleNumber,omitempty"`
	RegisteredDatetime string                  `protobuf:"bytes,15,opt,name=RegisteredDatetime,proto3" json:"RegisteredDatetime,omitempty"`
	DateFrom           string                  `protobuf:"bytes,16,opt,name=DateFrom,proto3" json:"DateFrom,omitempty"`
	DateTo             string                  `protobuf:"bytes,17,opt,name=DateTo,proto3" json:"DateTo,omitempty"`
	ProductId          int64                   `protobuf:"varint,18,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	ProductCode        string                  `protobuf:"bytes,19,opt,name=ProductCode,proto3" json:"ProductCode,omitempty"`
}

func (x *TrxMember) Reset() {
	*x = TrxMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxMember) ProtoMessage() {}

func (x *TrxMember) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxMember.ProtoReflect.Descriptor instead.
func (*TrxMember) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{1}
}

func (x *TrxMember) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *TrxMember) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *TrxMember) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TrxMember) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TrxMember) GetRoleType() string {
	if x != nil {
		return x.RoleType
	}
	return ""
}

func (x *TrxMember) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TrxMember) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TrxMember) GetActive() string {
	if x != nil {
		return x.Active
	}
	return ""
}

func (x *TrxMember) GetActiveAt() string {
	if x != nil {
		return x.ActiveAt
	}
	return ""
}

func (x *TrxMember) GetNonActiveAt() *wrapperspb.StringValue {
	if x != nil {
		return x.NonActiveAt
	}
	return nil
}

func (x *TrxMember) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *TrxMember) GetTypePartner() string {
	if x != nil {
		return x.TypePartner
	}
	return ""
}

func (x *TrxMember) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *TrxMember) GetVehicleNumber() string {
	if x != nil {
		return x.VehicleNumber
	}
	return ""
}

func (x *TrxMember) GetRegisteredDatetime() string {
	if x != nil {
		return x.RegisteredDatetime
	}
	return ""
}

func (x *TrxMember) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *TrxMember) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *TrxMember) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *TrxMember) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

type MerchantKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OuId            int64  `protobuf:"varint,2,opt,name=OuId,proto3" json:"OuId,omitempty"`
	OuName          string `protobuf:"bytes,3,opt,name=OuName,proto3" json:"OuName,omitempty"`
	OuCode          string `protobuf:"bytes,4,opt,name=OuCode,proto3" json:"OuCode,omitempty"`
	OuSubBranchId   int64  `protobuf:"varint,5,opt,name=OuSubBranchId,proto3" json:"OuSubBranchId,omitempty"`
	OuSubBranchName string `protobuf:"bytes,6,opt,name=OuSubBranchName,proto3" json:"OuSubBranchName,omitempty"`
	OuSubBranchCode string `protobuf:"bytes,7,opt,name=OuSubBranchCode,proto3" json:"OuSubBranchCode,omitempty"`
	MainOuId        int64  `protobuf:"varint,8,opt,name=MainOuId,proto3" json:"MainOuId,omitempty"`
	MainOuCode      string `protobuf:"bytes,9,opt,name=MainOuCode,proto3" json:"MainOuCode,omitempty"`
	MainOuName      string `protobuf:"bytes,10,opt,name=MainOuName,proto3" json:"MainOuName,omitempty"`
}

func (x *MerchantKey) Reset() {
	*x = MerchantKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantKey) ProtoMessage() {}

func (x *MerchantKey) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantKey.ProtoReflect.Descriptor instead.
func (*MerchantKey) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{2}
}

func (x *MerchantKey) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MerchantKey) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *MerchantKey) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *MerchantKey) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *MerchantKey) GetOuSubBranchId() int64 {
	if x != nil {
		return x.OuSubBranchId
	}
	return 0
}

func (x *MerchantKey) GetOuSubBranchName() string {
	if x != nil {
		return x.OuSubBranchName
	}
	return ""
}

func (x *MerchantKey) GetOuSubBranchCode() string {
	if x != nil {
		return x.OuSubBranchCode
	}
	return ""
}

func (x *MerchantKey) GetMainOuId() int64 {
	if x != nil {
		return x.MainOuId
	}
	return 0
}

func (x *MerchantKey) GetMainOuCode() string {
	if x != nil {
		return x.MainOuCode
	}
	return ""
}

func (x *MerchantKey) GetMainOuName() string {
	if x != nil {
		return x.MainOuName
	}
	return ""
}

type ResMerchantKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Merchantkey *MerchantKey `protobuf:"bytes,1,opt,name=merchantkey,proto3" json:"merchantkey,omitempty"`
}

func (x *ResMerchantKey) Reset() {
	*x = ResMerchantKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMerchantKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMerchantKey) ProtoMessage() {}

func (x *ResMerchantKey) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMerchantKey.ProtoReflect.Descriptor instead.
func (*ResMerchantKey) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{3}
}

func (x *ResMerchantKey) GetMerchantkey() *MerchantKey {
	if x != nil {
		return x.Merchantkey
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{4}
}

type Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *Param) Reset() {
	*x = Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Param) ProtoMessage() {}

func (x *Param) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Param.ProtoReflect.Descriptor instead.
func (*Param) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{5}
}

func (x *Param) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type ResponseMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response map[string]*anypb.Any `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResponseMap) Reset() {
	*x = ResponseMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMap) ProtoMessage() {}

func (x *ResponseMap) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMap.ProtoReflect.Descriptor instead.
func (*ResponseMap) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseMap) GetResponse() map[string]*anypb.Any {
	if x != nil {
		return x.Response
	}
	return nil
}

type RequestTrxCheckin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckInDatetime  string  `protobuf:"bytes,1,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	ProductCode      string  `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	DeviceId         string  `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	IpTerminal       string  `protobuf:"bytes,4,opt,name=ipTerminal,proto3" json:"ipTerminal,omitempty"`
	CardNumber       string  `protobuf:"bytes,6,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	UuidCard         string  `protobuf:"bytes,7,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	TypeCard         string  `protobuf:"bytes,8,opt,name=typeCard,proto3" json:"typeCard,omitempty"`
	BeginningBalance float64 `protobuf:"fixed64,9,opt,name=beginningBalance,proto3" json:"beginningBalance,omitempty"`
}

func (x *RequestTrxCheckin) Reset() {
	*x = RequestTrxCheckin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTrxCheckin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTrxCheckin) ProtoMessage() {}

func (x *RequestTrxCheckin) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTrxCheckin.ProtoReflect.Descriptor instead.
func (*RequestTrxCheckin) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{7}
}

func (x *RequestTrxCheckin) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *RequestTrxCheckin) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestTrxCheckin) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RequestTrxCheckin) GetIpTerminal() string {
	if x != nil {
		return x.IpTerminal
	}
	return ""
}

func (x *RequestTrxCheckin) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *RequestTrxCheckin) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *RequestTrxCheckin) GetTypeCard() string {
	if x != nil {
		return x.TypeCard
	}
	return ""
}

func (x *RequestTrxCheckin) GetBeginningBalance() float64 {
	if x != nil {
		return x.BeginningBalance
	}
	return 0
}

type ResponseErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response bool `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ResponseErr) Reset() {
	*x = ResponseErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseErr) ProtoMessage() {}

func (x *ResponseErr) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseErr.ProtoReflect.Descriptor instead.
func (*ResponseErr) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseErr) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

type RequestTrxCheckInWithoutCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckInDatetime string `protobuf:"bytes,1,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	ProductCode     string `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	IpTerminal      string `protobuf:"bytes,3,opt,name=ipTerminal,proto3" json:"ipTerminal,omitempty"`
	RefId           string `protobuf:"bytes,4,opt,name=refId,proto3" json:"refId,omitempty"`
}

func (x *RequestTrxCheckInWithoutCard) Reset() {
	*x = RequestTrxCheckInWithoutCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTrxCheckInWithoutCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTrxCheckInWithoutCard) ProtoMessage() {}

func (x *RequestTrxCheckInWithoutCard) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTrxCheckInWithoutCard.ProtoReflect.Descriptor instead.
func (*RequestTrxCheckInWithoutCard) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{9}
}

func (x *RequestTrxCheckInWithoutCard) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *RequestTrxCheckInWithoutCard) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestTrxCheckInWithoutCard) GetIpTerminal() string {
	if x != nil {
		return x.IpTerminal
	}
	return ""
}

func (x *RequestTrxCheckInWithoutCard) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

type Trx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo                          string                `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	DocDate                        string                `protobuf:"bytes,2,opt,name=docDate,proto3" json:"docDate,omitempty"`
	PaymentRefDocno                string                `protobuf:"bytes,3,opt,name=paymentRefDocno,proto3" json:"paymentRefDocno,omitempty"`
	CheckinDateTime                string                `protobuf:"bytes,4,opt,name=checkinDateTime,proto3" json:"checkinDateTime,omitempty"`
	CheckoutDateTime               string                `protobuf:"bytes,5,opt,name=checkoutDateTime,proto3" json:"checkoutDateTime,omitempty"`
	DeviceIdIn                     string                `protobuf:"bytes,6,opt,name=deviceIdIn,proto3" json:"deviceIdIn,omitempty"`
	DeviceId                       string                `protobuf:"bytes,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	GetIn                          string                `protobuf:"bytes,8,opt,name=getIn,proto3" json:"getIn,omitempty"`
	GetOut                         string                `protobuf:"bytes,9,opt,name=getOut,proto3" json:"getOut,omitempty"`
	CardNumberUUIDIn               string                `protobuf:"bytes,10,opt,name=cardNumberUUIDIn,proto3" json:"cardNumberUUIDIn,omitempty"`
	CardNumberIn                   string                `protobuf:"bytes,11,opt,name=cardNumberIn,proto3" json:"cardNumberIn,omitempty"`
	CardNumberUUID                 string                `protobuf:"bytes,12,opt,name=cardNumberUUID,proto3" json:"cardNumberUUID,omitempty"`
	CardNumber                     string                `protobuf:"bytes,13,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	TypeCard                       string                `protobuf:"bytes,14,opt,name=typeCard,proto3" json:"typeCard,omitempty"`
	BeginningBalance               float64               `protobuf:"fixed64,15,opt,name=beginningBalance,proto3" json:"beginningBalance,omitempty"`
	ExtLocalDateTime               string                `protobuf:"bytes,16,opt,name=extLocalDateTime,proto3" json:"extLocalDateTime,omitempty"`
	ChargeAmount                   float64               `protobuf:"fixed64,17,opt,name=chargeAmount,proto3" json:"chargeAmount,omitempty"`
	GrandTotal                     float64               `protobuf:"fixed64,18,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	ProductCode                    string                `protobuf:"bytes,19,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName                    string                `protobuf:"bytes,20,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductData                    string                `protobuf:"bytes,21,opt,name=productData,proto3" json:"productData,omitempty"`
	RequestData                    string                `protobuf:"bytes,22,opt,name=requestData,proto3" json:"requestData,omitempty"`
	RequestOutData                 string                `protobuf:"bytes,23,opt,name=requestOutData,proto3" json:"requestOutData,omitempty"`
	OuId                           int64                 `protobuf:"varint,24,opt,name=ouId,proto3" json:"ouId,omitempty"`
	OuName                         string                `protobuf:"bytes,25,opt,name=ouName,proto3" json:"ouName,omitempty"`
	OuCode                         string                `protobuf:"bytes,26,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuSubBranchId                  int64                 `protobuf:"varint,27,opt,name=ouSubBranchId,proto3" json:"ouSubBranchId,omitempty"`
	USubBranchName                 string                `protobuf:"bytes,28,opt,name=uSubBranchName,proto3" json:"uSubBranchName,omitempty"`
	OuSubBranchCode                string                `protobuf:"bytes,29,opt,name=ouSubBranchCode,proto3" json:"ouSubBranchCode,omitempty"`
	MainOuId                       int64                 `protobuf:"varint,30,opt,name=mainOuId,proto3" json:"mainOuId,omitempty"`
	MainOuCode                     string                `protobuf:"bytes,31,opt,name=mainOuCode,proto3" json:"mainOuCode,omitempty"`
	MainOuName                     string                `protobuf:"bytes,32,opt,name=mainOuName,proto3" json:"mainOuName,omitempty"`
	MemberCode                     string                `protobuf:"bytes,33,opt,name=memberCode,proto3" json:"memberCode,omitempty"`
	MemberName                     string                `protobuf:"bytes,34,opt,name=memberName,proto3" json:"memberName,omitempty"`
	MemberType                     string                `protobuf:"bytes,35,opt,name=memberType,proto3" json:"memberType,omitempty"`
	MemberStatus                   string                `protobuf:"bytes,36,opt,name=memberStatus,proto3" json:"memberStatus,omitempty"`
	MemberExpiredDate              string                `protobuf:"bytes,37,opt,name=memberExpiredDate,proto3" json:"memberExpiredDate,omitempty"`
	CheckInTime                    int64                 `protobuf:"varint,38,opt,name=checkInTime,proto3" json:"checkInTime,omitempty"`
	CheckOutTime                   int64                 `protobuf:"varint,39,opt,name=checkOutTime,proto3" json:"checkOutTime,omitempty"`
	DurationTime                   int64                 `protobuf:"varint,40,opt,name=durationTime,proto3" json:"durationTime,omitempty"`
	VehicleNumberIn                string                `protobuf:"bytes,41,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	VehicleNumberOut               string                `protobuf:"bytes,42,opt,name=vehicleNumberOut,proto3" json:"vehicleNumberOut,omitempty"`
	LogTrans                       string                `protobuf:"bytes,43,opt,name=logTrans,proto3" json:"logTrans,omitempty"`
	MerchantKey                    string                `protobuf:"bytes,44,opt,name=merchantKey,proto3" json:"merchantKey,omitempty"`
	QrText                         string                `protobuf:"bytes,45,opt,name=qrText,proto3" json:"qrText,omitempty"`
	QrA2P                          string                `protobuf:"bytes,46,opt,name=qrA2P,proto3" json:"qrA2P,omitempty"`
	QrTextPaymentOnline            string                `protobuf:"bytes,47,opt,name=qrTextPaymentOnline,proto3" json:"qrTextPaymentOnline,omitempty"`
	TrxInvoiceItem                 []*TrxInvoiceItem     `protobuf:"bytes,48,rep,name=trxInvoiceItem,proto3" json:"trxInvoiceItem,omitempty"`
	FlagSyncData                   bool                  `protobuf:"varint,49,opt,name=flagSyncData,proto3" json:"flagSyncData,omitempty"`
	MemberData                     *TrxMember            `protobuf:"bytes,50,opt,name=memberData,proto3" json:"memberData,omitempty"`
	TrxAddInfo                     map[string]*anypb.Any `protobuf:"bytes,51,rep,name=trxAddInfo,proto3" json:"trxAddInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //interface
	FlagTrxFromCloud               bool                  `protobuf:"varint,52,opt,name=flagTrxFromCloud,proto3" json:"flagTrxFromCloud,omitempty"`
	IsRsyncDataTrx                 bool                  `protobuf:"varint,53,opt,name=isRsyncDataTrx,proto3" json:"isRsyncDataTrx,omitempty"`
	ExcludeSf                      bool                  `protobuf:"varint,54,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
	FlagCharge                     bool                  `protobuf:"varint,55,opt,name=flagCharge,proto3" json:"flagCharge,omitempty"`
	ChargeType                     string                `protobuf:"bytes,58,opt,name=ChargeType,proto3" json:"ChargeType,omitempty"`
	RequestAddTrxInvoiceDetailItem *TrxInvoiceDetailItem `protobuf:"bytes,56,opt,name=requestAddTrxInvoiceDetailItem,proto3" json:"requestAddTrxInvoiceDetailItem,omitempty"`
	LastUpdatedAt                  string                `protobuf:"bytes,57,opt,name=lastUpdatedAt,proto3" json:"lastUpdatedAt,omitempty"`
}

func (x *Trx) Reset() {
	*x = Trx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trx) ProtoMessage() {}

func (x *Trx) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trx.ProtoReflect.Descriptor instead.
func (*Trx) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{10}
}

func (x *Trx) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *Trx) GetDocDate() string {
	if x != nil {
		return x.DocDate
	}
	return ""
}

func (x *Trx) GetPaymentRefDocno() string {
	if x != nil {
		return x.PaymentRefDocno
	}
	return ""
}

func (x *Trx) GetCheckinDateTime() string {
	if x != nil {
		return x.CheckinDateTime
	}
	return ""
}

func (x *Trx) GetCheckoutDateTime() string {
	if x != nil {
		return x.CheckoutDateTime
	}
	return ""
}

func (x *Trx) GetDeviceIdIn() string {
	if x != nil {
		return x.DeviceIdIn
	}
	return ""
}

func (x *Trx) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Trx) GetGetIn() string {
	if x != nil {
		return x.GetIn
	}
	return ""
}

func (x *Trx) GetGetOut() string {
	if x != nil {
		return x.GetOut
	}
	return ""
}

func (x *Trx) GetCardNumberUUIDIn() string {
	if x != nil {
		return x.CardNumberUUIDIn
	}
	return ""
}

func (x *Trx) GetCardNumberIn() string {
	if x != nil {
		return x.CardNumberIn
	}
	return ""
}

func (x *Trx) GetCardNumberUUID() string {
	if x != nil {
		return x.CardNumberUUID
	}
	return ""
}

func (x *Trx) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *Trx) GetTypeCard() string {
	if x != nil {
		return x.TypeCard
	}
	return ""
}

func (x *Trx) GetBeginningBalance() float64 {
	if x != nil {
		return x.BeginningBalance
	}
	return 0
}

func (x *Trx) GetExtLocalDateTime() string {
	if x != nil {
		return x.ExtLocalDateTime
	}
	return ""
}

func (x *Trx) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *Trx) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *Trx) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *Trx) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Trx) GetProductData() string {
	if x != nil {
		return x.ProductData
	}
	return ""
}

func (x *Trx) GetRequestData() string {
	if x != nil {
		return x.RequestData
	}
	return ""
}

func (x *Trx) GetRequestOutData() string {
	if x != nil {
		return x.RequestOutData
	}
	return ""
}

func (x *Trx) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *Trx) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *Trx) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *Trx) GetOuSubBranchId() int64 {
	if x != nil {
		return x.OuSubBranchId
	}
	return 0
}

func (x *Trx) GetUSubBranchName() string {
	if x != nil {
		return x.USubBranchName
	}
	return ""
}

func (x *Trx) GetOuSubBranchCode() string {
	if x != nil {
		return x.OuSubBranchCode
	}
	return ""
}

func (x *Trx) GetMainOuId() int64 {
	if x != nil {
		return x.MainOuId
	}
	return 0
}

func (x *Trx) GetMainOuCode() string {
	if x != nil {
		return x.MainOuCode
	}
	return ""
}

func (x *Trx) GetMainOuName() string {
	if x != nil {
		return x.MainOuName
	}
	return ""
}

func (x *Trx) GetMemberCode() string {
	if x != nil {
		return x.MemberCode
	}
	return ""
}

func (x *Trx) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *Trx) GetMemberType() string {
	if x != nil {
		return x.MemberType
	}
	return ""
}

func (x *Trx) GetMemberStatus() string {
	if x != nil {
		return x.MemberStatus
	}
	return ""
}

func (x *Trx) GetMemberExpiredDate() string {
	if x != nil {
		return x.MemberExpiredDate
	}
	return ""
}

func (x *Trx) GetCheckInTime() int64 {
	if x != nil {
		return x.CheckInTime
	}
	return 0
}

func (x *Trx) GetCheckOutTime() int64 {
	if x != nil {
		return x.CheckOutTime
	}
	return 0
}

func (x *Trx) GetDurationTime() int64 {
	if x != nil {
		return x.DurationTime
	}
	return 0
}

func (x *Trx) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *Trx) GetVehicleNumberOut() string {
	if x != nil {
		return x.VehicleNumberOut
	}
	return ""
}

func (x *Trx) GetLogTrans() string {
	if x != nil {
		return x.LogTrans
	}
	return ""
}

func (x *Trx) GetMerchantKey() string {
	if x != nil {
		return x.MerchantKey
	}
	return ""
}

func (x *Trx) GetQrText() string {
	if x != nil {
		return x.QrText
	}
	return ""
}

func (x *Trx) GetQrA2P() string {
	if x != nil {
		return x.QrA2P
	}
	return ""
}

func (x *Trx) GetQrTextPaymentOnline() string {
	if x != nil {
		return x.QrTextPaymentOnline
	}
	return ""
}

func (x *Trx) GetTrxInvoiceItem() []*TrxInvoiceItem {
	if x != nil {
		return x.TrxInvoiceItem
	}
	return nil
}

func (x *Trx) GetFlagSyncData() bool {
	if x != nil {
		return x.FlagSyncData
	}
	return false
}

func (x *Trx) GetMemberData() *TrxMember {
	if x != nil {
		return x.MemberData
	}
	return nil
}

func (x *Trx) GetTrxAddInfo() map[string]*anypb.Any {
	if x != nil {
		return x.TrxAddInfo
	}
	return nil
}

func (x *Trx) GetFlagTrxFromCloud() bool {
	if x != nil {
		return x.FlagTrxFromCloud
	}
	return false
}

func (x *Trx) GetIsRsyncDataTrx() bool {
	if x != nil {
		return x.IsRsyncDataTrx
	}
	return false
}

func (x *Trx) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

func (x *Trx) GetFlagCharge() bool {
	if x != nil {
		return x.FlagCharge
	}
	return false
}

func (x *Trx) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *Trx) GetRequestAddTrxInvoiceDetailItem() *TrxInvoiceDetailItem {
	if x != nil {
		return x.RequestAddTrxInvoiceDetailItem
	}
	return nil
}

func (x *Trx) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

type ResponseTrxTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckInDateTime      string `protobuf:"bytes,2,opt,name=checkInDateTime,proto3" json:"checkInDateTime,omitempty"`
	DocNo                string `protobuf:"bytes,3,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductName          string `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	VehicleNumberIn      string `protobuf:"bytes,5,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	QrCode               string `protobuf:"bytes,6,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	QrCodePaymentOnlinet string `protobuf:"bytes,7,opt,name=qrCodePaymentOnlinet,proto3" json:"qrCodePaymentOnlinet,omitempty"`
	OuCode               string `protobuf:"bytes,8,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuName               string `protobuf:"bytes,9,opt,name=ouName,proto3" json:"ouName,omitempty"`
	Address              string `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ResponseTrxTicket) Reset() {
	*x = ResponseTrxTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTrxTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTrxTicket) ProtoMessage() {}

func (x *ResponseTrxTicket) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTrxTicket.ProtoReflect.Descriptor instead.
func (*ResponseTrxTicket) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseTrxTicket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResponseTrxTicket) GetCheckInDateTime() string {
	if x != nil {
		return x.CheckInDateTime
	}
	return ""
}

func (x *ResponseTrxTicket) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResponseTrxTicket) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResponseTrxTicket) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *ResponseTrxTicket) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *ResponseTrxTicket) GetQrCodePaymentOnlinet() string {
	if x != nil {
		return x.QrCodePaymentOnlinet
	}
	return ""
}

func (x *ResponseTrxTicket) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *ResponseTrxTicket) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *ResponseTrxTicket) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type RequestInquiryWithoutCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QrCode          string `protobuf:"bytes,1,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	ProductCode     string `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	InquiryDateTime string `protobuf:"bytes,3,opt,name=inquiryDateTime,proto3" json:"inquiryDateTime,omitempty"`
	TerminalId      string `protobuf:"bytes,4,opt,name=terminalId,proto3" json:"terminalId,omitempty"`
}

func (x *RequestInquiryWithoutCard) Reset() {
	*x = RequestInquiryWithoutCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInquiryWithoutCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInquiryWithoutCard) ProtoMessage() {}

func (x *RequestInquiryWithoutCard) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInquiryWithoutCard.ProtoReflect.Descriptor instead.
func (*RequestInquiryWithoutCard) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{12}
}

func (x *RequestInquiryWithoutCard) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *RequestInquiryWithoutCard) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestInquiryWithoutCard) GetInquiryDateTime() string {
	if x != nil {
		return x.InquiryDateTime
	}
	return ""
}

func (x *RequestInquiryWithoutCard) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

type RequestCustomInquiryWithoutCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QrCode          string `protobuf:"bytes,1,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	ProductCode     string `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	InquiryDateTime string `protobuf:"bytes,3,opt,name=inquiryDateTime,proto3" json:"inquiryDateTime,omitempty"`
	TerminalId      string `protobuf:"bytes,4,opt,name=terminalId,proto3" json:"terminalId,omitempty"`
	VehicleNumber   string `protobuf:"bytes,5,opt,name=vehicleNumber,proto3" json:"vehicleNumber,omitempty"`
}

func (x *RequestCustomInquiryWithoutCard) Reset() {
	*x = RequestCustomInquiryWithoutCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCustomInquiryWithoutCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCustomInquiryWithoutCard) ProtoMessage() {}

func (x *RequestCustomInquiryWithoutCard) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCustomInquiryWithoutCard.ProtoReflect.Descriptor instead.
func (*RequestCustomInquiryWithoutCard) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{13}
}

func (x *RequestCustomInquiryWithoutCard) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *RequestCustomInquiryWithoutCard) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestCustomInquiryWithoutCard) GetInquiryDateTime() string {
	if x != nil {
		return x.InquiryDateTime
	}
	return ""
}

func (x *RequestCustomInquiryWithoutCard) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

func (x *RequestCustomInquiryWithoutCard) GetVehicleNumber() string {
	if x != nil {
		return x.VehicleNumber
	}
	return ""
}

type RequestInquiryTrxDepoWithoutCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNoDepo       string `protobuf:"bytes,1,opt,name=docNoDepo,proto3" json:"docNoDepo,omitempty"`
	ProductCode     string `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	InquiryDateTime string `protobuf:"bytes,3,opt,name=inquiryDateTime,proto3" json:"inquiryDateTime,omitempty"`
	TerminalId      string `protobuf:"bytes,4,opt,name=terminalId,proto3" json:"terminalId,omitempty"`
}

func (x *RequestInquiryTrxDepoWithoutCard) Reset() {
	*x = RequestInquiryTrxDepoWithoutCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInquiryTrxDepoWithoutCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInquiryTrxDepoWithoutCard) ProtoMessage() {}

func (x *RequestInquiryTrxDepoWithoutCard) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInquiryTrxDepoWithoutCard.ProtoReflect.Descriptor instead.
func (*RequestInquiryTrxDepoWithoutCard) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{14}
}

func (x *RequestInquiryTrxDepoWithoutCard) GetDocNoDepo() string {
	if x != nil {
		return x.DocNoDepo
	}
	return ""
}

func (x *RequestInquiryTrxDepoWithoutCard) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestInquiryTrxDepoWithoutCard) GetInquiryDateTime() string {
	if x != nil {
		return x.InquiryDateTime
	}
	return ""
}

func (x *RequestInquiryTrxDepoWithoutCard) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

type RequestInquiryWithCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UuidCard        string `protobuf:"bytes,1,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	ProductCode     string `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	InquiryDateTime string `protobuf:"bytes,3,opt,name=inquiryDateTime,proto3" json:"inquiryDateTime,omitempty"`
	TerminalId      string `protobuf:"bytes,4,opt,name=terminalId,proto3" json:"terminalId,omitempty"`
}

func (x *RequestInquiryWithCard) Reset() {
	*x = RequestInquiryWithCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInquiryWithCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInquiryWithCard) ProtoMessage() {}

func (x *RequestInquiryWithCard) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInquiryWithCard.ProtoReflect.Descriptor instead.
func (*RequestInquiryWithCard) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{15}
}

func (x *RequestInquiryWithCard) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *RequestInquiryWithCard) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestInquiryWithCard) GetInquiryDateTime() string {
	if x != nil {
		return x.InquiryDateTime
	}
	return ""
}

func (x *RequestInquiryWithCard) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

type RequestInquiryWithCardP3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNumber       string  `protobuf:"bytes,1,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	UuidCard         string  `protobuf:"bytes,2,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	TypeCard         string  `protobuf:"bytes,3,opt,name=typeCard,proto3" json:"typeCard,omitempty"`
	BeginningBalance float64 `protobuf:"fixed64,4,opt,name=beginningBalance,proto3" json:"beginningBalance,omitempty"`
	ProductCode      string  `protobuf:"bytes,5,opt,name=productCode,proto3" json:"productCode,omitempty"`
	CheckInDateTime  string  `protobuf:"bytes,6,opt,name=checkInDateTime,proto3" json:"checkInDateTime,omitempty"`
	DeviceId         string  `protobuf:"bytes,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	TerminalId       string  `protobuf:"bytes,8,opt,name=terminalId,proto3" json:"terminalId,omitempty"`
}

func (x *RequestInquiryWithCardP3) Reset() {
	*x = RequestInquiryWithCardP3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInquiryWithCardP3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInquiryWithCardP3) ProtoMessage() {}

func (x *RequestInquiryWithCardP3) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInquiryWithCardP3.ProtoReflect.Descriptor instead.
func (*RequestInquiryWithCardP3) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{16}
}

func (x *RequestInquiryWithCardP3) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *RequestInquiryWithCardP3) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *RequestInquiryWithCardP3) GetTypeCard() string {
	if x != nil {
		return x.TypeCard
	}
	return ""
}

func (x *RequestInquiryWithCardP3) GetBeginningBalance() float64 {
	if x != nil {
		return x.BeginningBalance
	}
	return 0
}

func (x *RequestInquiryWithCardP3) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestInquiryWithCardP3) GetCheckInDateTime() string {
	if x != nil {
		return x.CheckInDateTime
	}
	return ""
}

func (x *RequestInquiryWithCardP3) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RequestInquiryWithCardP3) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

type RequestInquiryWithCardCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UuidCard        string `protobuf:"bytes,1,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	VehicleNumber   string `protobuf:"bytes,2,opt,name=vehicleNumber,proto3" json:"vehicleNumber,omitempty"`
	ProductCode     string `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	InquiryDateTime string `protobuf:"bytes,4,opt,name=inquiryDateTime,proto3" json:"inquiryDateTime,omitempty"`
	TerminalId      string `protobuf:"bytes,5,opt,name=terminalId,proto3" json:"terminalId,omitempty"`
}

func (x *RequestInquiryWithCardCustom) Reset() {
	*x = RequestInquiryWithCardCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInquiryWithCardCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInquiryWithCardCustom) ProtoMessage() {}

func (x *RequestInquiryWithCardCustom) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInquiryWithCardCustom.ProtoReflect.Descriptor instead.
func (*RequestInquiryWithCardCustom) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{17}
}

func (x *RequestInquiryWithCardCustom) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *RequestInquiryWithCardCustom) GetVehicleNumber() string {
	if x != nil {
		return x.VehicleNumber
	}
	return ""
}

func (x *RequestInquiryWithCardCustom) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestInquiryWithCardCustom) GetInquiryDateTime() string {
	if x != nil {
		return x.InquiryDateTime
	}
	return ""
}

func (x *RequestInquiryWithCardCustom) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

type ResultFindTrxOutstanding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocNo           string            `protobuf:"bytes,2,opt,name=docNo,proto3" json:"docNo,omitempty"`
	GrandTotal      float64           `protobuf:"fixed64,3,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	CheckInDatetime string            `protobuf:"bytes,4,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	OverNightPrice  float64           `protobuf:"fixed64,5,opt,name=overNightPrice,proto3" json:"overNightPrice,omitempty"`
	Is24H           string            `protobuf:"bytes,6,opt,name=is24H,proto3" json:"is24H,omitempty"`
	CardNumber      string            `protobuf:"bytes,7,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	CardNumberUUID  string            `protobuf:"bytes,8,opt,name=cardNumberUUID,proto3" json:"cardNumberUUID,omitempty"`
	OuCode          string            `protobuf:"bytes,9,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	VehicleNumberIn string            `protobuf:"bytes,10,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	TrxInvoiceItem  []*TrxInvoiceItem `protobuf:"bytes,11,rep,name=trxInvoiceItem,proto3" json:"trxInvoiceItem,omitempty"`
}

func (x *ResultFindTrxOutstanding) Reset() {
	*x = ResultFindTrxOutstanding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultFindTrxOutstanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultFindTrxOutstanding) ProtoMessage() {}

func (x *ResultFindTrxOutstanding) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultFindTrxOutstanding.ProtoReflect.Descriptor instead.
func (*ResultFindTrxOutstanding) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{18}
}

func (x *ResultFindTrxOutstanding) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResultFindTrxOutstanding) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResultFindTrxOutstanding) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *ResultFindTrxOutstanding) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *ResultFindTrxOutstanding) GetOverNightPrice() float64 {
	if x != nil {
		return x.OverNightPrice
	}
	return 0
}

func (x *ResultFindTrxOutstanding) GetIs24H() string {
	if x != nil {
		return x.Is24H
	}
	return ""
}

func (x *ResultFindTrxOutstanding) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *ResultFindTrxOutstanding) GetCardNumberUUID() string {
	if x != nil {
		return x.CardNumberUUID
	}
	return ""
}

func (x *ResultFindTrxOutstanding) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *ResultFindTrxOutstanding) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *ResultFindTrxOutstanding) GetTrxInvoiceItem() []*TrxInvoiceItem {
	if x != nil {
		return x.TrxInvoiceItem
	}
	return nil
}

type ResultInquiryTrx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocNo           string     `protobuf:"bytes,2,opt,name=docNo,proto3" json:"docNo,omitempty"`
	Nominal         float64    `protobuf:"fixed64,3,opt,name=nominal,proto3" json:"nominal,omitempty"`
	ProductCode     string     `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName     string     `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	VehicleNumberIn string     `protobuf:"bytes,6,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	QrCode          string     `protobuf:"bytes,7,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	ExcludeSf       bool       `protobuf:"varint,8,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
	Duration        *anypb.Any `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
	InvoiceDetail   *anypb.Any `protobuf:"bytes,10,opt,name=invoiceDetail,proto3" json:"invoiceDetail,omitempty"`
	OuCode          string     `protobuf:"bytes,11,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
}

func (x *ResultInquiryTrx) Reset() {
	*x = ResultInquiryTrx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultInquiryTrx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultInquiryTrx) ProtoMessage() {}

func (x *ResultInquiryTrx) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultInquiryTrx.ProtoReflect.Descriptor instead.
func (*ResultInquiryTrx) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{19}
}

func (x *ResultInquiryTrx) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResultInquiryTrx) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResultInquiryTrx) GetNominal() float64 {
	if x != nil {
		return x.Nominal
	}
	return 0
}

func (x *ResultInquiryTrx) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ResultInquiryTrx) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResultInquiryTrx) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *ResultInquiryTrx) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *ResultInquiryTrx) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

func (x *ResultInquiryTrx) GetDuration() *anypb.Any {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ResultInquiryTrx) GetInvoiceDetail() *anypb.Any {
	if x != nil {
		return x.InvoiceDetail
	}
	return nil
}

func (x *ResultInquiryTrx) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

type ResultInquiryTrxCustomV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocNo             string     `protobuf:"bytes,2,opt,name=docNo,proto3" json:"docNo,omitempty"`
	Nominal           float64    `protobuf:"fixed64,3,opt,name=nominal,proto3" json:"nominal,omitempty"`
	ProductCode       string     `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName       string     `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	VehicleNumberIn   string     `protobuf:"bytes,6,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	MemberCode        string     `protobuf:"bytes,7,opt,name=memberCode,proto3" json:"memberCode,omitempty"`
	MemberName        string     `protobuf:"bytes,8,opt,name=memberName,proto3" json:"memberName,omitempty"`
	MemberExpiredDate string     `protobuf:"bytes,9,opt,name=memberExpiredDate,proto3" json:"memberExpiredDate,omitempty"`
	MemberType        string     `protobuf:"bytes,10,opt,name=memberType,proto3" json:"memberType,omitempty"`
	MemberStatus      string     `protobuf:"bytes,11,opt,name=memberStatus,proto3" json:"memberStatus,omitempty"`
	QrCode            string     `protobuf:"bytes,12,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	ExcludeSf         bool       `protobuf:"varint,13,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
	Duration          *anypb.Any `protobuf:"bytes,14,opt,name=duration,proto3" json:"duration,omitempty"`
	InvoiceDetail     *anypb.Any `protobuf:"bytes,15,opt,name=invoiceDetail,proto3" json:"invoiceDetail,omitempty"`
	OuCode            string     `protobuf:"bytes,16,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
}

func (x *ResultInquiryTrxCustomV2) Reset() {
	*x = ResultInquiryTrxCustomV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultInquiryTrxCustomV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultInquiryTrxCustomV2) ProtoMessage() {}

func (x *ResultInquiryTrxCustomV2) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultInquiryTrxCustomV2.ProtoReflect.Descriptor instead.
func (*ResultInquiryTrxCustomV2) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{20}
}

func (x *ResultInquiryTrxCustomV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetNominal() float64 {
	if x != nil {
		return x.Nominal
	}
	return 0
}

func (x *ResultInquiryTrxCustomV2) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetMemberCode() string {
	if x != nil {
		return x.MemberCode
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetMemberExpiredDate() string {
	if x != nil {
		return x.MemberExpiredDate
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetMemberType() string {
	if x != nil {
		return x.MemberType
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetMemberStatus() string {
	if x != nil {
		return x.MemberStatus
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *ResultInquiryTrxCustomV2) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

func (x *ResultInquiryTrxCustomV2) GetDuration() *anypb.Any {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ResultInquiryTrxCustomV2) GetInvoiceDetail() *anypb.Any {
	if x != nil {
		return x.InvoiceDetail
	}
	return nil
}

func (x *ResultInquiryTrxCustomV2) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

type ResultInquiryTrxCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocNo           string     `protobuf:"bytes,2,opt,name=docNo,proto3" json:"docNo,omitempty"`
	Nominal         float64    `protobuf:"fixed64,3,opt,name=nominal,proto3" json:"nominal,omitempty"`
	ProductCode     string     `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName     string     `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	VehicleNumberIn string     `protobuf:"bytes,6,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	QrCode          string     `protobuf:"bytes,7,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	ExcludeSf       bool       `protobuf:"varint,8,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
	Duration        *anypb.Any `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
	MemberCode      string     `protobuf:"bytes,10,opt,name=memberCode,proto3" json:"memberCode,omitempty"`
	MemberName      string     `protobuf:"bytes,11,opt,name=memberName,proto3" json:"memberName,omitempty"`
	MemberType      string     `protobuf:"bytes,12,opt,name=memberType,proto3" json:"memberType,omitempty"`
	OuCode          string     `protobuf:"bytes,13,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
}

func (x *ResultInquiryTrxCustom) Reset() {
	*x = ResultInquiryTrxCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultInquiryTrxCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultInquiryTrxCustom) ProtoMessage() {}

func (x *ResultInquiryTrxCustom) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultInquiryTrxCustom.ProtoReflect.Descriptor instead.
func (*ResultInquiryTrxCustom) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{21}
}

func (x *ResultInquiryTrxCustom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResultInquiryTrxCustom) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResultInquiryTrxCustom) GetNominal() float64 {
	if x != nil {
		return x.Nominal
	}
	return 0
}

func (x *ResultInquiryTrxCustom) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ResultInquiryTrxCustom) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResultInquiryTrxCustom) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *ResultInquiryTrxCustom) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *ResultInquiryTrxCustom) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

func (x *ResultInquiryTrxCustom) GetDuration() *anypb.Any {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ResultInquiryTrxCustom) GetMemberCode() string {
	if x != nil {
		return x.MemberCode
	}
	return ""
}

func (x *ResultInquiryTrxCustom) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *ResultInquiryTrxCustom) GetMemberType() string {
	if x != nil {
		return x.MemberType
	}
	return ""
}

func (x *ResultInquiryTrxCustom) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

type ResultInquiryTrxWithCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocNo             string     `protobuf:"bytes,2,opt,name=docNo,proto3" json:"docNo,omitempty"`
	CardNumberUUID    string     `protobuf:"bytes,3,opt,name=cardNumberUUID,proto3" json:"cardNumberUUID,omitempty"`
	CardNumber        string     `protobuf:"bytes,4,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	Nominal           float64    `protobuf:"fixed64,5,opt,name=nominal,proto3" json:"nominal,omitempty"`
	ProductCode       string     `protobuf:"bytes,6,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName       string     `protobuf:"bytes,7,opt,name=productName,proto3" json:"productName,omitempty"`
	VehicleNumberIn   string     `protobuf:"bytes,8,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	QrCode            string     `protobuf:"bytes,9,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	ExcludeSf         bool       `protobuf:"varint,10,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
	Duration          *anypb.Any `protobuf:"bytes,11,opt,name=duration,proto3" json:"duration,omitempty"`
	Duration24H       *anypb.Any `protobuf:"bytes,12,opt,name=duration24H,proto3" json:"duration24H,omitempty"`
	MemberCode        string     `protobuf:"bytes,13,opt,name=memberCode,proto3" json:"memberCode,omitempty"`
	MemberName        string     `protobuf:"bytes,14,opt,name=memberName,proto3" json:"memberName,omitempty"`
	MemberType        string     `protobuf:"bytes,15,opt,name=memberType,proto3" json:"memberType,omitempty"`
	MemberExpiredDate string     `protobuf:"bytes,16,opt,name=memberExpiredDate,proto3" json:"memberExpiredDate,omitempty"`
	MemberStatus      string     `protobuf:"bytes,17,opt,name=memberStatus,proto3" json:"memberStatus,omitempty"`
	InvoiceDetail     *anypb.Any `protobuf:"bytes,18,opt,name=invoiceDetail,proto3" json:"invoiceDetail,omitempty"`
	OuCode            string     `protobuf:"bytes,19,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
}

func (x *ResultInquiryTrxWithCard) Reset() {
	*x = ResultInquiryTrxWithCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultInquiryTrxWithCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultInquiryTrxWithCard) ProtoMessage() {}

func (x *ResultInquiryTrxWithCard) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultInquiryTrxWithCard.ProtoReflect.Descriptor instead.
func (*ResultInquiryTrxWithCard) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{22}
}

func (x *ResultInquiryTrxWithCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetCardNumberUUID() string {
	if x != nil {
		return x.CardNumberUUID
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetNominal() float64 {
	if x != nil {
		return x.Nominal
	}
	return 0
}

func (x *ResultInquiryTrxWithCard) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

func (x *ResultInquiryTrxWithCard) GetDuration() *anypb.Any {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ResultInquiryTrxWithCard) GetDuration24H() *anypb.Any {
	if x != nil {
		return x.Duration24H
	}
	return nil
}

func (x *ResultInquiryTrxWithCard) GetMemberCode() string {
	if x != nil {
		return x.MemberCode
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetMemberType() string {
	if x != nil {
		return x.MemberType
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetMemberExpiredDate() string {
	if x != nil {
		return x.MemberExpiredDate
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetMemberStatus() string {
	if x != nil {
		return x.MemberStatus
	}
	return ""
}

func (x *ResultInquiryTrxWithCard) GetInvoiceDetail() *anypb.Any {
	if x != nil {
		return x.InvoiceDetail
	}
	return nil
}

func (x *ResultInquiryTrxWithCard) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

type RequestConfirmTrx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceId         string  `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	IpTerminal       string  `protobuf:"bytes,3,opt,name=ipTerminal,proto3" json:"ipTerminal,omitempty"`
	CardNumber       string  `protobuf:"bytes,4,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	CardType         string  `protobuf:"bytes,5,opt,name=cardType,proto3" json:"cardType,omitempty"`
	LastBalance      int64   `protobuf:"varint,6,opt,name=lastBalance,proto3" json:"lastBalance,omitempty"`
	CurrentBalance   int64   `protobuf:"varint,7,opt,name=currentBalance,proto3" json:"currentBalance,omitempty"`
	UuidCard         string  `protobuf:"bytes,8,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	ProductCode      string  `protobuf:"bytes,9,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName      string  `protobuf:"bytes,10,opt,name=productName,proto3" json:"productName,omitempty"`
	CheckOutDatetime string  `protobuf:"bytes,11,opt,name=checkOutDatetime,proto3" json:"checkOutDatetime,omitempty"`
	GrandTotal       float64 `protobuf:"fixed64,12,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	LogTrans         string  `protobuf:"bytes,13,opt,name=logTrans,proto3" json:"logTrans,omitempty"`
	VehicleNumber    string  `protobuf:"bytes,14,opt,name=vehicleNumber,proto3" json:"vehicleNumber,omitempty"`
	Username         string  `protobuf:"bytes,15,opt,name=username,proto3" json:"username,omitempty"`
	ShiftCode        string  `protobuf:"bytes,16,opt,name=shiftCode,proto3" json:"shiftCode,omitempty"`
	ExcludeSf        bool    `protobuf:"varint,17,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
}

func (x *RequestConfirmTrx) Reset() {
	*x = RequestConfirmTrx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestConfirmTrx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestConfirmTrx) ProtoMessage() {}

func (x *RequestConfirmTrx) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestConfirmTrx.ProtoReflect.Descriptor instead.
func (*RequestConfirmTrx) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{23}
}

func (x *RequestConfirmTrx) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestConfirmTrx) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RequestConfirmTrx) GetIpTerminal() string {
	if x != nil {
		return x.IpTerminal
	}
	return ""
}

func (x *RequestConfirmTrx) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *RequestConfirmTrx) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *RequestConfirmTrx) GetLastBalance() int64 {
	if x != nil {
		return x.LastBalance
	}
	return 0
}

func (x *RequestConfirmTrx) GetCurrentBalance() int64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *RequestConfirmTrx) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *RequestConfirmTrx) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestConfirmTrx) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *RequestConfirmTrx) GetCheckOutDatetime() string {
	if x != nil {
		return x.CheckOutDatetime
	}
	return ""
}

func (x *RequestConfirmTrx) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *RequestConfirmTrx) GetLogTrans() string {
	if x != nil {
		return x.LogTrans
	}
	return ""
}

func (x *RequestConfirmTrx) GetVehicleNumber() string {
	if x != nil {
		return x.VehicleNumber
	}
	return ""
}

func (x *RequestConfirmTrx) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RequestConfirmTrx) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

func (x *RequestConfirmTrx) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

type RequestConfirmTrxDepositCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceId         string  `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	IpTerminal       string  `protobuf:"bytes,3,opt,name=ipTerminal,proto3" json:"ipTerminal,omitempty"`
	CardNumber       string  `protobuf:"bytes,4,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	CardType         string  `protobuf:"bytes,5,opt,name=cardType,proto3" json:"cardType,omitempty"`
	LastBalance      int64   `protobuf:"varint,6,opt,name=lastBalance,proto3" json:"lastBalance,omitempty"`
	CurrentBalance   int64   `protobuf:"varint,7,opt,name=currentBalance,proto3" json:"currentBalance,omitempty"`
	UuidCard         string  `protobuf:"bytes,8,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	ProductCode      string  `protobuf:"bytes,9,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName      string  `protobuf:"bytes,10,opt,name=productName,proto3" json:"productName,omitempty"`
	CheckOutDatetime string  `protobuf:"bytes,11,opt,name=checkOutDatetime,proto3" json:"checkOutDatetime,omitempty"`
	GrandTotal       float64 `protobuf:"fixed64,12,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	LogTrans         string  `protobuf:"bytes,13,opt,name=logTrans,proto3" json:"logTrans,omitempty"`
	Username         string  `protobuf:"bytes,14,opt,name=username,proto3" json:"username,omitempty"`
	ShiftCode        string  `protobuf:"bytes,15,opt,name=shiftCode,proto3" json:"shiftCode,omitempty"`
	ExcludeSf        bool    `protobuf:"varint,16,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
}

func (x *RequestConfirmTrxDepositCounter) Reset() {
	*x = RequestConfirmTrxDepositCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestConfirmTrxDepositCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestConfirmTrxDepositCounter) ProtoMessage() {}

func (x *RequestConfirmTrxDepositCounter) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestConfirmTrxDepositCounter.ProtoReflect.Descriptor instead.
func (*RequestConfirmTrxDepositCounter) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{24}
}

func (x *RequestConfirmTrxDepositCounter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetIpTerminal() string {
	if x != nil {
		return x.IpTerminal
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetLastBalance() int64 {
	if x != nil {
		return x.LastBalance
	}
	return 0
}

func (x *RequestConfirmTrxDepositCounter) GetCurrentBalance() int64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *RequestConfirmTrxDepositCounter) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetCheckOutDatetime() string {
	if x != nil {
		return x.CheckOutDatetime
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *RequestConfirmTrxDepositCounter) GetLogTrans() string {
	if x != nil {
		return x.LogTrans
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

func (x *RequestConfirmTrxDepositCounter) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

type TrxCheckOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxOutStanding *Trx `protobuf:"bytes,1,opt,name=trxOutStanding,proto3" json:"trxOutStanding,omitempty"`
	Trx            *Trx `protobuf:"bytes,2,opt,name=trx,proto3" json:"trx,omitempty"`
}

func (x *TrxCheckOut) Reset() {
	*x = TrxCheckOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxCheckOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxCheckOut) ProtoMessage() {}

func (x *TrxCheckOut) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxCheckOut.ProtoReflect.Descriptor instead.
func (*TrxCheckOut) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{25}
}

func (x *TrxCheckOut) GetTrxOutStanding() *Trx {
	if x != nil {
		return x.TrxOutStanding
	}
	return nil
}

func (x *TrxCheckOut) GetTrx() *Trx {
	if x != nil {
		return x.Trx
	}
	return nil
}

type LogActivityTrx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo     string `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	CreatedAt string `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Remark    string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *LogActivityTrx) Reset() {
	*x = LogActivityTrx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogActivityTrx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogActivityTrx) ProtoMessage() {}

func (x *LogActivityTrx) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogActivityTrx.ProtoReflect.Descriptor instead.
func (*LogActivityTrx) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{26}
}

func (x *LogActivityTrx) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *LogActivityTrx) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *LogActivityTrx) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type InvoiceTrx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo       string  `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	CreatedBy   string  `protobuf:"bytes,2,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedDate string  `protobuf:"bytes,3,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	TotalAmount float64 `protobuf:"fixed64,4,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	TypeInvoice string  `protobuf:"bytes,5,opt,name=typeInvoice,proto3" json:"typeInvoice,omitempty"`
}

func (x *InvoiceTrx) Reset() {
	*x = InvoiceTrx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceTrx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceTrx) ProtoMessage() {}

func (x *InvoiceTrx) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceTrx.ProtoReflect.Descriptor instead.
func (*InvoiceTrx) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{27}
}

func (x *InvoiceTrx) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *InvoiceTrx) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *InvoiceTrx) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *InvoiceTrx) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *InvoiceTrx) GetTypeInvoice() string {
	if x != nil {
		return x.TypeInvoice
	}
	return ""
}

type TrxInvoiceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo                  string  `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductId              int64   `protobuf:"varint,2,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductCode            string  `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName            string  `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	IsPctServiceFee        string  `protobuf:"bytes,5,opt,name=isPctServiceFee,proto3" json:"isPctServiceFee,omitempty"`
	ServiceFee             float64 `protobuf:"fixed64,6,opt,name=serviceFee,proto3" json:"serviceFee,omitempty"`
	ServiceFeeMember       float64 `protobuf:"fixed64,7,opt,name=serviceFeeMember,proto3" json:"serviceFeeMember,omitempty"`
	Price                  float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	BaseTime               int64   `protobuf:"varint,9,opt,name=baseTime,proto3" json:"baseTime,omitempty"`
	ProgressiveTime        int64   `protobuf:"varint,10,opt,name=progressiveTime,proto3" json:"progressiveTime,omitempty"`
	ProgressivePrice       float64 `protobuf:"fixed64,11,opt,name=progressivePrice,proto3" json:"progressivePrice,omitempty"`
	IsPct                  string  `protobuf:"bytes,12,opt,name=isPct,proto3" json:"isPct,omitempty"`
	ProgressivePct         int64   `protobuf:"varint,13,opt,name=progressivePct,proto3" json:"progressivePct,omitempty"`
	MaxPrice               float64 `protobuf:"fixed64,14,opt,name=maxPrice,proto3" json:"maxPrice,omitempty"`
	Is24H                  string  `protobuf:"bytes,15,opt,name=is24H,proto3" json:"is24H,omitempty"`
	OvernightTime          string  `protobuf:"bytes,16,opt,name=overnightTime,proto3" json:"overnightTime,omitempty"`
	OvernightPrice         float64 `protobuf:"fixed64,17,opt,name=overnightPrice,proto3" json:"overnightPrice,omitempty"`
	GracePeriod            int64   `protobuf:"varint,18,opt,name=gracePeriod,proto3" json:"gracePeriod,omitempty"`
	FlgRepeat              string  `protobuf:"bytes,19,opt,name=flgRepeat,proto3" json:"flgRepeat,omitempty"`
	TotalAmount            float64 `protobuf:"fixed64,20,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	TotalProgressiveAmount float64 `protobuf:"fixed64,21,opt,name=totalProgressiveAmount,proto3" json:"totalProgressiveAmount,omitempty"`
}

func (x *TrxInvoiceItem) Reset() {
	*x = TrxInvoiceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxInvoiceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxInvoiceItem) ProtoMessage() {}

func (x *TrxInvoiceItem) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxInvoiceItem.ProtoReflect.Descriptor instead.
func (*TrxInvoiceItem) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{28}
}

func (x *TrxInvoiceItem) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *TrxInvoiceItem) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *TrxInvoiceItem) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TrxInvoiceItem) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *TrxInvoiceItem) GetIsPctServiceFee() string {
	if x != nil {
		return x.IsPctServiceFee
	}
	return ""
}

func (x *TrxInvoiceItem) GetServiceFee() float64 {
	if x != nil {
		return x.ServiceFee
	}
	return 0
}

func (x *TrxInvoiceItem) GetServiceFeeMember() float64 {
	if x != nil {
		return x.ServiceFeeMember
	}
	return 0
}

func (x *TrxInvoiceItem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TrxInvoiceItem) GetBaseTime() int64 {
	if x != nil {
		return x.BaseTime
	}
	return 0
}

func (x *TrxInvoiceItem) GetProgressiveTime() int64 {
	if x != nil {
		return x.ProgressiveTime
	}
	return 0
}

func (x *TrxInvoiceItem) GetProgressivePrice() float64 {
	if x != nil {
		return x.ProgressivePrice
	}
	return 0
}

func (x *TrxInvoiceItem) GetIsPct() string {
	if x != nil {
		return x.IsPct
	}
	return ""
}

func (x *TrxInvoiceItem) GetProgressivePct() int64 {
	if x != nil {
		return x.ProgressivePct
	}
	return 0
}

func (x *TrxInvoiceItem) GetMaxPrice() float64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *TrxInvoiceItem) GetIs24H() string {
	if x != nil {
		return x.Is24H
	}
	return ""
}

func (x *TrxInvoiceItem) GetOvernightTime() string {
	if x != nil {
		return x.OvernightTime
	}
	return ""
}

func (x *TrxInvoiceItem) GetOvernightPrice() float64 {
	if x != nil {
		return x.OvernightPrice
	}
	return 0
}

func (x *TrxInvoiceItem) GetGracePeriod() int64 {
	if x != nil {
		return x.GracePeriod
	}
	return 0
}

func (x *TrxInvoiceItem) GetFlgRepeat() string {
	if x != nil {
		return x.FlgRepeat
	}
	return ""
}

func (x *TrxInvoiceItem) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *TrxInvoiceItem) GetTotalProgressiveAmount() float64 {
	if x != nil {
		return x.TotalProgressiveAmount
	}
	return 0
}

type TrxInvoiceDetailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo         string  `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductCode   string  `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	InvoiceAmount float64 `protobuf:"fixed64,3,opt,name=invoiceAmount,proto3" json:"invoiceAmount,omitempty"`
	CreatedAt     string  `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedDate   string  `protobuf:"bytes,5,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
}

func (x *TrxInvoiceDetailItem) Reset() {
	*x = TrxInvoiceDetailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxInvoiceDetailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxInvoiceDetailItem) ProtoMessage() {}

func (x *TrxInvoiceDetailItem) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxInvoiceDetailItem.ProtoReflect.Descriptor instead.
func (*TrxInvoiceDetailItem) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{29}
}

func (x *TrxInvoiceDetailItem) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *TrxInvoiceDetailItem) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TrxInvoiceDetailItem) GetInvoiceAmount() float64 {
	if x != nil {
		return x.InvoiceAmount
	}
	return 0
}

func (x *TrxInvoiceDetailItem) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TrxInvoiceDetailItem) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

type ResponseTrxInvoiceDetailsItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAmount float64 `protobuf:"fixed64,1,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
}

func (x *ResponseTrxInvoiceDetailsItemList) Reset() {
	*x = ResponseTrxInvoiceDetailsItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTrxInvoiceDetailsItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTrxInvoiceDetailsItemList) ProtoMessage() {}

func (x *ResponseTrxInvoiceDetailsItemList) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTrxInvoiceDetailsItemList.ProtoReflect.Descriptor instead.
func (*ResponseTrxInvoiceDetailsItemList) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{30}
}

func (x *ResponseTrxInvoiceDetailsItemList) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type RequestInquiryRedis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo           string  `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductCode     string  `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName     string  `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	GrandTotal      float64 `protobuf:"fixed64,4,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	OuCode          string  `protobuf:"bytes,5,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	MKey            string  `protobuf:"bytes,6,opt,name=mKey,proto3" json:"mKey,omitempty"`
	PaymentCategory string  `protobuf:"bytes,7,opt,name=paymentCategory,proto3" json:"paymentCategory,omitempty"`
	DeviceId        string  `protobuf:"bytes,8,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	ChannelCallback string  `protobuf:"bytes,9,opt,name=channelCallback,proto3" json:"channelCallback,omitempty"`
}

func (x *RequestInquiryRedis) Reset() {
	*x = RequestInquiryRedis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInquiryRedis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInquiryRedis) ProtoMessage() {}

func (x *RequestInquiryRedis) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInquiryRedis.ProtoReflect.Descriptor instead.
func (*RequestInquiryRedis) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{31}
}

func (x *RequestInquiryRedis) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *RequestInquiryRedis) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestInquiryRedis) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *RequestInquiryRedis) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *RequestInquiryRedis) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *RequestInquiryRedis) GetMKey() string {
	if x != nil {
		return x.MKey
	}
	return ""
}

func (x *RequestInquiryRedis) GetPaymentCategory() string {
	if x != nil {
		return x.PaymentCategory
	}
	return ""
}

func (x *RequestInquiryRedis) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RequestInquiryRedis) GetChannelCallback() string {
	if x != nil {
		return x.ChannelCallback
	}
	return ""
}

type InvoiceFeeDetailParking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	OvernightFee float64 `protobuf:"fixed64,2,opt,name=overnightFee,proto3" json:"overnightFee,omitempty"`
}

func (x *InvoiceFeeDetailParking) Reset() {
	*x = InvoiceFeeDetailParking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceFeeDetailParking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceFeeDetailParking) ProtoMessage() {}

func (x *InvoiceFeeDetailParking) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceFeeDetailParking.ProtoReflect.Descriptor instead.
func (*InvoiceFeeDetailParking) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{32}
}

func (x *InvoiceFeeDetailParking) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *InvoiceFeeDetailParking) GetOvernightFee() float64 {
	if x != nil {
		return x.OvernightFee
	}
	return 0
}

type ResponseConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo            string     `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductData      string     `protobuf:"bytes,2,opt,name=productData,proto3" json:"productData,omitempty"`
	ProductName      string     `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	CardNumber       string     `protobuf:"bytes,4,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	CardType         string     `protobuf:"bytes,5,opt,name=cardType,proto3" json:"cardType,omitempty"`
	CheckInDatetime  string     `protobuf:"bytes,6,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	CheckOutDatetime string     `protobuf:"bytes,7,opt,name=checkOutDatetime,proto3" json:"checkOutDatetime,omitempty"`
	VehicleNumberIn  string     `protobuf:"bytes,8,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	VehicleNumberOut string     `protobuf:"bytes,9,opt,name=vehicleNumberOut,proto3" json:"vehicleNumberOut,omitempty"`
	UuidCard         string     `protobuf:"bytes,10,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	ShowQRISArea     string     `protobuf:"bytes,11,opt,name=showQRISArea,proto3" json:"showQRISArea,omitempty"`
	CurrentBalance   int64      `protobuf:"varint,12,opt,name=currentBalance,proto3" json:"currentBalance,omitempty"`
	GrandTotal       float64    `protobuf:"fixed64,13,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	InvoiceDetail    *anypb.Any `protobuf:"bytes,14,opt,name=invoiceDetail,proto3" json:"invoiceDetail,omitempty"`
	OuCode           string     `protobuf:"bytes,15,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuName           string     `protobuf:"bytes,16,opt,name=ouName,proto3" json:"ouName,omitempty"`
	Address          string     `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	IpAddr           string     `protobuf:"bytes,18,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"`
}

func (x *ResponseConfirm) Reset() {
	*x = ResponseConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseConfirm) ProtoMessage() {}

func (x *ResponseConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseConfirm.ProtoReflect.Descriptor instead.
func (*ResponseConfirm) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{33}
}

func (x *ResponseConfirm) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResponseConfirm) GetProductData() string {
	if x != nil {
		return x.ProductData
	}
	return ""
}

func (x *ResponseConfirm) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResponseConfirm) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *ResponseConfirm) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *ResponseConfirm) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *ResponseConfirm) GetCheckOutDatetime() string {
	if x != nil {
		return x.CheckOutDatetime
	}
	return ""
}

func (x *ResponseConfirm) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *ResponseConfirm) GetVehicleNumberOut() string {
	if x != nil {
		return x.VehicleNumberOut
	}
	return ""
}

func (x *ResponseConfirm) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *ResponseConfirm) GetShowQRISArea() string {
	if x != nil {
		return x.ShowQRISArea
	}
	return ""
}

func (x *ResponseConfirm) GetCurrentBalance() int64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *ResponseConfirm) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *ResponseConfirm) GetInvoiceDetail() *anypb.Any {
	if x != nil {
		return x.InvoiceDetail
	}
	return nil
}

func (x *ResponseConfirm) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *ResponseConfirm) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *ResponseConfirm) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ResponseConfirm) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

type ResponseConfirmTrxDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo            string  `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductData      string  `protobuf:"bytes,2,opt,name=productData,proto3" json:"productData,omitempty"`
	ProductName      string  `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	CardNumber       string  `protobuf:"bytes,4,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	CardType         string  `protobuf:"bytes,5,opt,name=cardType,proto3" json:"cardType,omitempty"`
	CheckInDatetime  string  `protobuf:"bytes,6,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	CheckOutDatetime string  `protobuf:"bytes,7,opt,name=checkOutDatetime,proto3" json:"checkOutDatetime,omitempty"`
	UuidCard         string  `protobuf:"bytes,8,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	ShowQRISArea     string  `protobuf:"bytes,9,opt,name=showQRISArea,proto3" json:"showQRISArea,omitempty"`
	CurrentBalance   int64   `protobuf:"varint,10,opt,name=currentBalance,proto3" json:"currentBalance,omitempty"`
	GrandTotal       float64 `protobuf:"fixed64,11,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	OuCode           string  `protobuf:"bytes,12,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuName           string  `protobuf:"bytes,13,opt,name=ouName,proto3" json:"ouName,omitempty"`
	Address          string  `protobuf:"bytes,14,opt,name=address,proto3" json:"address,omitempty"`
	IpAddr           string  `protobuf:"bytes,15,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"`
}

func (x *ResponseConfirmTrxDeposit) Reset() {
	*x = ResponseConfirmTrxDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseConfirmTrxDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseConfirmTrxDeposit) ProtoMessage() {}

func (x *ResponseConfirmTrxDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseConfirmTrxDeposit.ProtoReflect.Descriptor instead.
func (*ResponseConfirmTrxDeposit) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{34}
}

func (x *ResponseConfirmTrxDeposit) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetProductData() string {
	if x != nil {
		return x.ProductData
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetCheckOutDatetime() string {
	if x != nil {
		return x.CheckOutDatetime
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetShowQRISArea() string {
	if x != nil {
		return x.ShowQRISArea
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetCurrentBalance() int64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *ResponseConfirmTrxDeposit) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *ResponseConfirmTrxDeposit) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ResponseConfirmTrxDeposit) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

type ConfirmTrxByPassMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType    string  `protobuf:"bytes,1,opt,name=cardType,proto3" json:"cardType,omitempty"`
	DeviceId    string  `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	CardNumber  string  `protobuf:"bytes,3,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	ProductCode string  `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	LogTrans    string  `protobuf:"bytes,5,opt,name=logTrans,proto3" json:"logTrans,omitempty"`
	IpTerminal  string  `protobuf:"bytes,6,opt,name=ipTerminal,proto3" json:"ipTerminal,omitempty"`
	GrandTotal  float64 `protobuf:"fixed64,7,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
}

func (x *ConfirmTrxByPassMessage) Reset() {
	*x = ConfirmTrxByPassMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmTrxByPassMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmTrxByPassMessage) ProtoMessage() {}

func (x *ConfirmTrxByPassMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmTrxByPassMessage.ProtoReflect.Descriptor instead.
func (*ConfirmTrxByPassMessage) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{35}
}

func (x *ConfirmTrxByPassMessage) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *ConfirmTrxByPassMessage) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ConfirmTrxByPassMessage) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *ConfirmTrxByPassMessage) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ConfirmTrxByPassMessage) GetLogTrans() string {
	if x != nil {
		return x.LogTrans
	}
	return ""
}

func (x *ConfirmTrxByPassMessage) GetIpTerminal() string {
	if x != nil {
		return x.IpTerminal
	}
	return ""
}

func (x *ConfirmTrxByPassMessage) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

type RequestInquiryPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo         string  `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductCode   string  `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName   string  `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	PaymentMethod string  `protobuf:"bytes,4,opt,name=paymentMethod,proto3" json:"paymentMethod,omitempty"`
	GrandTotal    float64 `protobuf:"fixed64,5,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
}

func (x *RequestInquiryPayment) Reset() {
	*x = RequestInquiryPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInquiryPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInquiryPayment) ProtoMessage() {}

func (x *RequestInquiryPayment) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInquiryPayment.ProtoReflect.Descriptor instead.
func (*RequestInquiryPayment) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{36}
}

func (x *RequestInquiryPayment) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *RequestInquiryPayment) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestInquiryPayment) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *RequestInquiryPayment) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *RequestInquiryPayment) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

type RequestInquiryPaymentP3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCode     string  `protobuf:"bytes,1,opt,name=productCode,proto3" json:"productCode,omitempty"`
	PaymentMethod   string  `protobuf:"bytes,2,opt,name=paymentMethod,proto3" json:"paymentMethod,omitempty"`
	InquiryDatetime string  `protobuf:"bytes,3,opt,name=inquiryDatetime,proto3" json:"inquiryDatetime,omitempty"`
	GrandTotal      float64 `protobuf:"fixed64,4,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	TerminalId      string  `protobuf:"bytes,5,opt,name=terminalId,proto3" json:"terminalId,omitempty"`
}

func (x *RequestInquiryPaymentP3) Reset() {
	*x = RequestInquiryPaymentP3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInquiryPaymentP3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInquiryPaymentP3) ProtoMessage() {}

func (x *RequestInquiryPaymentP3) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInquiryPaymentP3.ProtoReflect.Descriptor instead.
func (*RequestInquiryPaymentP3) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{37}
}

func (x *RequestInquiryPaymentP3) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestInquiryPaymentP3) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *RequestInquiryPaymentP3) GetInquiryDatetime() string {
	if x != nil {
		return x.InquiryDatetime
	}
	return ""
}

func (x *RequestInquiryPaymentP3) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *RequestInquiryPaymentP3) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

type TrxOutstandingForClearSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefDocNo               string `protobuf:"bytes,1,opt,name=refDocNo,proto3" json:"refDocNo,omitempty"`
	TappingDate            string `protobuf:"bytes,2,opt,name=tappingDate,proto3" json:"tappingDate,omitempty"`
	TappingDatetime        string `protobuf:"bytes,3,opt,name=tappingDatetime,proto3" json:"tappingDatetime,omitempty"`
	CardNumberUuid         string `protobuf:"bytes,4,opt,name=cardNumberUuid,proto3" json:"cardNumberUuid,omitempty"`
	FlagClearSession       bool   `protobuf:"varint,5,opt,name=flagClearSession,proto3" json:"flagClearSession,omitempty"`
	ClearDatetime          string `protobuf:"bytes,6,opt,name=clearDatetime,proto3" json:"clearDatetime,omitempty"`
	TrxOutstandingSnapshot *Trx   `protobuf:"bytes,7,opt,name=trxOutstandingSnapshot,proto3" json:"trxOutstandingSnapshot,omitempty"` // Assuming Trx is another message defined elsewhere
}

func (x *TrxOutstandingForClearSession) Reset() {
	*x = TrxOutstandingForClearSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxOutstandingForClearSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxOutstandingForClearSession) ProtoMessage() {}

func (x *TrxOutstandingForClearSession) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxOutstandingForClearSession.ProtoReflect.Descriptor instead.
func (*TrxOutstandingForClearSession) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{38}
}

func (x *TrxOutstandingForClearSession) GetRefDocNo() string {
	if x != nil {
		return x.RefDocNo
	}
	return ""
}

func (x *TrxOutstandingForClearSession) GetTappingDate() string {
	if x != nil {
		return x.TappingDate
	}
	return ""
}

func (x *TrxOutstandingForClearSession) GetTappingDatetime() string {
	if x != nil {
		return x.TappingDatetime
	}
	return ""
}

func (x *TrxOutstandingForClearSession) GetCardNumberUuid() string {
	if x != nil {
		return x.CardNumberUuid
	}
	return ""
}

func (x *TrxOutstandingForClearSession) GetFlagClearSession() bool {
	if x != nil {
		return x.FlagClearSession
	}
	return false
}

func (x *TrxOutstandingForClearSession) GetClearDatetime() string {
	if x != nil {
		return x.ClearDatetime
	}
	return ""
}

func (x *TrxOutstandingForClearSession) GetTrxOutstandingSnapshot() *Trx {
	if x != nil {
		return x.TrxOutstandingSnapshot
	}
	return nil
}

type RequestSyncTrxToCLoud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	DateTo   string `protobuf:"bytes,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	OuCode   string `protobuf:"bytes,3,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	Limit    int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *RequestSyncTrxToCLoud) Reset() {
	*x = RequestSyncTrxToCLoud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSyncTrxToCLoud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSyncTrxToCLoud) ProtoMessage() {}

func (x *RequestSyncTrxToCLoud) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSyncTrxToCLoud.ProtoReflect.Descriptor instead.
func (*RequestSyncTrxToCLoud) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{39}
}

func (x *RequestSyncTrxToCLoud) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *RequestSyncTrxToCLoud) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *RequestSyncTrxToCLoud) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *RequestSyncTrxToCLoud) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RequestUpdateProductPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Pin         int64  `protobuf:"varint,3,opt,name=pin,proto3" json:"pin,omitempty"`
	ProductCode string `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductId   int64  `protobuf:"varint,5,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *RequestUpdateProductPrice) Reset() {
	*x = RequestUpdateProductPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUpdateProductPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUpdateProductPrice) ProtoMessage() {}

func (x *RequestUpdateProductPrice) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUpdateProductPrice.ProtoReflect.Descriptor instead.
func (*RequestUpdateProductPrice) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{40}
}

func (x *RequestUpdateProductPrice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestUpdateProductPrice) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RequestUpdateProductPrice) GetPin() int64 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *RequestUpdateProductPrice) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestUpdateProductPrice) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type UpdateProductCloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OuId        int64  `protobuf:"varint,1,opt,name=ouId,proto3" json:"ouId,omitempty"`
	DocNo       string `protobuf:"bytes,2,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductId   int64  `protobuf:"varint,3,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductCode string `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName string `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
}

func (x *UpdateProductCloud) Reset() {
	*x = UpdateProductCloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductCloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductCloud) ProtoMessage() {}

func (x *UpdateProductCloud) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductCloud.ProtoReflect.Descriptor instead.
func (*UpdateProductCloud) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateProductCloud) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *UpdateProductCloud) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *UpdateProductCloud) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateProductCloud) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *UpdateProductCloud) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

type RequestRegistrationMemberLocal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword            string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	FirstName          string `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName           string `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	PhoneNumber        string `protobuf:"bytes,4,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	VehicleNumber      string `protobuf:"bytes,5,opt,name=vehicleNumber,proto3" json:"vehicleNumber,omitempty"`
	StartDate          string `protobuf:"bytes,6,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate            string `protobuf:"bytes,7,opt,name=endDate,proto3" json:"endDate,omitempty"`
	IdentifierCustomer string `protobuf:"bytes,8,opt,name=identifierCustomer,proto3" json:"identifierCustomer,omitempty"`
}

func (x *RequestRegistrationMemberLocal) Reset() {
	*x = RequestRegistrationMemberLocal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRegistrationMemberLocal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRegistrationMemberLocal) ProtoMessage() {}

func (x *RequestRegistrationMemberLocal) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRegistrationMemberLocal.ProtoReflect.Descriptor instead.
func (*RequestRegistrationMemberLocal) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{42}
}

func (x *RequestRegistrationMemberLocal) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *RequestRegistrationMemberLocal) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RequestRegistrationMemberLocal) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RequestRegistrationMemberLocal) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RequestRegistrationMemberLocal) GetVehicleNumber() string {
	if x != nil {
		return x.VehicleNumber
	}
	return ""
}

func (x *RequestRegistrationMemberLocal) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *RequestRegistrationMemberLocal) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *RequestRegistrationMemberLocal) GetIdentifierCustomer() string {
	if x != nil {
		return x.IdentifierCustomer
	}
	return ""
}

type TrxProductCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword     string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	ProductName string `protobuf:"bytes,2,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductCode string `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
}

func (x *TrxProductCustom) Reset() {
	*x = TrxProductCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxProductCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxProductCustom) ProtoMessage() {}

func (x *TrxProductCustom) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxProductCustom.ProtoReflect.Descriptor instead.
func (*TrxProductCustom) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{43}
}

func (x *TrxProductCustom) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *TrxProductCustom) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *TrxProductCustom) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

type TrxInvoiceDepositCounterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNoDepo        string  `protobuf:"bytes,1,opt,name=docNoDepo,proto3" json:"docNoDepo,omitempty"`
	ProductId        int64   `protobuf:"varint,2,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductCode      string  `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName      string  `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	IsPctServiceFee  string  `protobuf:"bytes,5,opt,name=isPctServiceFee,proto3" json:"isPctServiceFee,omitempty"`
	ServiceFee       float64 `protobuf:"fixed64,6,opt,name=serviceFee,proto3" json:"serviceFee,omitempty"`
	ServiceFeeMember float64 `protobuf:"fixed64,7,opt,name=serviceFeeMember,proto3" json:"serviceFeeMember,omitempty"`
	Price            float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	TotalAmount      float64 `protobuf:"fixed64,9,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
}

func (x *TrxInvoiceDepositCounterItem) Reset() {
	*x = TrxInvoiceDepositCounterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxInvoiceDepositCounterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxInvoiceDepositCounterItem) ProtoMessage() {}

func (x *TrxInvoiceDepositCounterItem) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxInvoiceDepositCounterItem.ProtoReflect.Descriptor instead.
func (*TrxInvoiceDepositCounterItem) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{44}
}

func (x *TrxInvoiceDepositCounterItem) GetDocNoDepo() string {
	if x != nil {
		return x.DocNoDepo
	}
	return ""
}

func (x *TrxInvoiceDepositCounterItem) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *TrxInvoiceDepositCounterItem) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TrxInvoiceDepositCounterItem) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *TrxInvoiceDepositCounterItem) GetIsPctServiceFee() string {
	if x != nil {
		return x.IsPctServiceFee
	}
	return ""
}

func (x *TrxInvoiceDepositCounterItem) GetServiceFee() float64 {
	if x != nil {
		return x.ServiceFee
	}
	return 0
}

func (x *TrxInvoiceDepositCounterItem) GetServiceFeeMember() float64 {
	if x != nil {
		return x.ServiceFeeMember
	}
	return 0
}

func (x *TrxInvoiceDepositCounterItem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TrxInvoiceDepositCounterItem) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type RequestTrxDepositCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckInDatetime string `protobuf:"bytes,1,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	ProductCode     string `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	DepositorName   string `protobuf:"bytes,3,opt,name=depositorName,proto3" json:"depositorName,omitempty"`
	Merk            string `protobuf:"bytes,4,opt,name=merk,proto3" json:"merk,omitempty"`
	Username        string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	ShiftCode       string `protobuf:"bytes,6,opt,name=shiftCode,proto3" json:"shiftCode,omitempty"`
}

func (x *RequestTrxDepositCounter) Reset() {
	*x = RequestTrxDepositCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTrxDepositCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTrxDepositCounter) ProtoMessage() {}

func (x *RequestTrxDepositCounter) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTrxDepositCounter.ProtoReflect.Descriptor instead.
func (*RequestTrxDepositCounter) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{45}
}

func (x *RequestTrxDepositCounter) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *RequestTrxDepositCounter) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestTrxDepositCounter) GetDepositorName() string {
	if x != nil {
		return x.DepositorName
	}
	return ""
}

func (x *RequestTrxDepositCounter) GetMerk() string {
	if x != nil {
		return x.Merk
	}
	return ""
}

func (x *RequestTrxDepositCounter) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RequestTrxDepositCounter) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

type TrxDepositCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNoDepo        string                          `protobuf:"bytes,1,opt,name=docNoDepo,proto3" json:"docNoDepo,omitempty"`
	DocDateDepo      string                          `protobuf:"bytes,2,opt,name=docDateDepo,proto3" json:"docDateDepo,omitempty"`
	ProductData      string                          `protobuf:"bytes,3,opt,name=productData,proto3" json:"productData,omitempty"`
	ProductCode      string                          `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName      string                          `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	Merk             string                          `protobuf:"bytes,6,opt,name=merk,proto3" json:"merk,omitempty"`
	DeviceId         string                          `protobuf:"bytes,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DepositorName    string                          `protobuf:"bytes,8,opt,name=depositorName,proto3" json:"depositorName,omitempty"`
	CheckInDatetime  string                          `protobuf:"bytes,9,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	CheckOutDatetime string                          `protobuf:"bytes,10,opt,name=checkOutDatetime,proto3" json:"checkOutDatetime,omitempty"`
	OuId             int64                           `protobuf:"varint,11,opt,name=ouId,proto3" json:"ouId,omitempty"`
	OuName           string                          `protobuf:"bytes,12,opt,name=ouName,proto3" json:"ouName,omitempty"`
	OuCode           string                          `protobuf:"bytes,13,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuSubBranchId    int64                           `protobuf:"varint,14,opt,name=ouSubBranchId,proto3" json:"ouSubBranchId,omitempty"`
	OuSubBranchName  string                          `protobuf:"bytes,15,opt,name=ouSubBranchName,proto3" json:"ouSubBranchName,omitempty"`
	OuSubBranchCode  string                          `protobuf:"bytes,16,opt,name=ouSubBranchCode,proto3" json:"ouSubBranchCode,omitempty"`
	MainOuId         int64                           `protobuf:"varint,17,opt,name=mainOuId,proto3" json:"mainOuId,omitempty"`
	MainOuCode       string                          `protobuf:"bytes,18,opt,name=mainOuCode,proto3" json:"mainOuCode,omitempty"`
	MainOuName       string                          `protobuf:"bytes,19,opt,name=mainOuName,proto3" json:"mainOuName,omitempty"`
	MemberCode       string                          `protobuf:"bytes,20,opt,name=memberCode,proto3" json:"memberCode,omitempty"`
	MemberName       string                          `protobuf:"bytes,21,opt,name=memberName,proto3" json:"memberName,omitempty"`
	MemberType       string                          `protobuf:"bytes,22,opt,name=memberType,proto3" json:"memberType,omitempty"`
	RequestData      string                          `protobuf:"bytes,23,opt,name=requestData,proto3" json:"requestData,omitempty"`
	RequestOutData   string                          `protobuf:"bytes,24,opt,name=requestOutData,proto3" json:"requestOutData,omitempty"`
	CardNumberUUID   string                          `protobuf:"bytes,25,opt,name=cardNumberUUID,proto3" json:"cardNumberUUID,omitempty"`
	CardNumber       string                          `protobuf:"bytes,26,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	TypeCard         string                          `protobuf:"bytes,27,opt,name=typeCard,proto3" json:"typeCard,omitempty"`
	BeginningBalance float64                         `protobuf:"fixed64,28,opt,name=beginningBalance,proto3" json:"beginningBalance,omitempty"`
	ExtLocalDatetime string                          `protobuf:"bytes,29,opt,name=extLocalDatetime,proto3" json:"extLocalDatetime,omitempty"`
	GrandTotal       float64                         `protobuf:"fixed64,30,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	LogTrans         string                          `protobuf:"bytes,31,opt,name=logTrans,proto3" json:"logTrans,omitempty"`
	MerchantKey      string                          `protobuf:"bytes,32,opt,name=merchantKey,proto3" json:"merchantKey,omitempty"`
	QrText           string                          `protobuf:"bytes,33,opt,name=qrText,proto3" json:"qrText,omitempty"`
	TrxInvoiceItem   []*TrxInvoiceDepositCounterItem `protobuf:"bytes,34,rep,name=trxInvoiceItem,proto3" json:"trxInvoiceItem,omitempty"`
	FlagSyncData     bool                            `protobuf:"varint,35,opt,name=flagSyncData,proto3" json:"flagSyncData,omitempty"`
	Username         string                          `protobuf:"bytes,36,opt,name=username,proto3" json:"username,omitempty"`
	ShiftCode        string                          `protobuf:"bytes,37,opt,name=shiftCode,proto3" json:"shiftCode,omitempty"`
	UsernameOut      string                          `protobuf:"bytes,38,opt,name=usernameOut,proto3" json:"usernameOut,omitempty"`
	ShiftCodeOut     string                          `protobuf:"bytes,39,opt,name=shiftCodeOut,proto3" json:"shiftCodeOut,omitempty"`
}

func (x *TrxDepositCounter) Reset() {
	*x = TrxDepositCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxDepositCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxDepositCounter) ProtoMessage() {}

func (x *TrxDepositCounter) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxDepositCounter.ProtoReflect.Descriptor instead.
func (*TrxDepositCounter) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{46}
}

func (x *TrxDepositCounter) GetDocNoDepo() string {
	if x != nil {
		return x.DocNoDepo
	}
	return ""
}

func (x *TrxDepositCounter) GetDocDateDepo() string {
	if x != nil {
		return x.DocDateDepo
	}
	return ""
}

func (x *TrxDepositCounter) GetProductData() string {
	if x != nil {
		return x.ProductData
	}
	return ""
}

func (x *TrxDepositCounter) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TrxDepositCounter) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *TrxDepositCounter) GetMerk() string {
	if x != nil {
		return x.Merk
	}
	return ""
}

func (x *TrxDepositCounter) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TrxDepositCounter) GetDepositorName() string {
	if x != nil {
		return x.DepositorName
	}
	return ""
}

func (x *TrxDepositCounter) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *TrxDepositCounter) GetCheckOutDatetime() string {
	if x != nil {
		return x.CheckOutDatetime
	}
	return ""
}

func (x *TrxDepositCounter) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *TrxDepositCounter) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *TrxDepositCounter) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *TrxDepositCounter) GetOuSubBranchId() int64 {
	if x != nil {
		return x.OuSubBranchId
	}
	return 0
}

func (x *TrxDepositCounter) GetOuSubBranchName() string {
	if x != nil {
		return x.OuSubBranchName
	}
	return ""
}

func (x *TrxDepositCounter) GetOuSubBranchCode() string {
	if x != nil {
		return x.OuSubBranchCode
	}
	return ""
}

func (x *TrxDepositCounter) GetMainOuId() int64 {
	if x != nil {
		return x.MainOuId
	}
	return 0
}

func (x *TrxDepositCounter) GetMainOuCode() string {
	if x != nil {
		return x.MainOuCode
	}
	return ""
}

func (x *TrxDepositCounter) GetMainOuName() string {
	if x != nil {
		return x.MainOuName
	}
	return ""
}

func (x *TrxDepositCounter) GetMemberCode() string {
	if x != nil {
		return x.MemberCode
	}
	return ""
}

func (x *TrxDepositCounter) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *TrxDepositCounter) GetMemberType() string {
	if x != nil {
		return x.MemberType
	}
	return ""
}

func (x *TrxDepositCounter) GetRequestData() string {
	if x != nil {
		return x.RequestData
	}
	return ""
}

func (x *TrxDepositCounter) GetRequestOutData() string {
	if x != nil {
		return x.RequestOutData
	}
	return ""
}

func (x *TrxDepositCounter) GetCardNumberUUID() string {
	if x != nil {
		return x.CardNumberUUID
	}
	return ""
}

func (x *TrxDepositCounter) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *TrxDepositCounter) GetTypeCard() string {
	if x != nil {
		return x.TypeCard
	}
	return ""
}

func (x *TrxDepositCounter) GetBeginningBalance() float64 {
	if x != nil {
		return x.BeginningBalance
	}
	return 0
}

func (x *TrxDepositCounter) GetExtLocalDatetime() string {
	if x != nil {
		return x.ExtLocalDatetime
	}
	return ""
}

func (x *TrxDepositCounter) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *TrxDepositCounter) GetLogTrans() string {
	if x != nil {
		return x.LogTrans
	}
	return ""
}

func (x *TrxDepositCounter) GetMerchantKey() string {
	if x != nil {
		return x.MerchantKey
	}
	return ""
}

func (x *TrxDepositCounter) GetQrText() string {
	if x != nil {
		return x.QrText
	}
	return ""
}

func (x *TrxDepositCounter) GetTrxInvoiceItem() []*TrxInvoiceDepositCounterItem {
	if x != nil {
		return x.TrxInvoiceItem
	}
	return nil
}

func (x *TrxDepositCounter) GetFlagSyncData() bool {
	if x != nil {
		return x.FlagSyncData
	}
	return false
}

func (x *TrxDepositCounter) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TrxDepositCounter) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

func (x *TrxDepositCounter) GetUsernameOut() string {
	if x != nil {
		return x.UsernameOut
	}
	return ""
}

func (x *TrxDepositCounter) GetShiftCodeOut() string {
	if x != nil {
		return x.ShiftCodeOut
	}
	return ""
}

type ResponseTrxDepositCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Asumsi bahwa ObjectID dikonversi menjadi string di protobuf
	CheckInDatetime string `protobuf:"bytes,2,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	DocNoDepo       string `protobuf:"bytes,3,opt,name=docNoDepo,proto3" json:"docNoDepo,omitempty"`
	ProductName     string `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	DepositorName   string `protobuf:"bytes,5,opt,name=depositorName,proto3" json:"depositorName,omitempty"`
	Merk            string `protobuf:"bytes,6,opt,name=merk,proto3" json:"merk,omitempty"`
	QrCode          string `protobuf:"bytes,7,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	OuCode          string `protobuf:"bytes,8,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuName          string `protobuf:"bytes,9,opt,name=ouName,proto3" json:"ouName,omitempty"`
	Address         string `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ResponseTrxDepositCounter) Reset() {
	*x = ResponseTrxDepositCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTrxDepositCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTrxDepositCounter) ProtoMessage() {}

func (x *ResponseTrxDepositCounter) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTrxDepositCounter.ProtoReflect.Descriptor instead.
func (*ResponseTrxDepositCounter) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{47}
}

func (x *ResponseTrxDepositCounter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResponseTrxDepositCounter) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *ResponseTrxDepositCounter) GetDocNoDepo() string {
	if x != nil {
		return x.DocNoDepo
	}
	return ""
}

func (x *ResponseTrxDepositCounter) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResponseTrxDepositCounter) GetDepositorName() string {
	if x != nil {
		return x.DepositorName
	}
	return ""
}

func (x *ResponseTrxDepositCounter) GetMerk() string {
	if x != nil {
		return x.Merk
	}
	return ""
}

func (x *ResponseTrxDepositCounter) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *ResponseTrxDepositCounter) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *ResponseTrxDepositCounter) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *ResponseTrxDepositCounter) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ResultFindTrxDepositCounterOutstanding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Asumsi bahwa ObjectID dikonversi menjadi string di protobuf
	DocNoDepo       string                          `protobuf:"bytes,2,opt,name=docNoDepo,proto3" json:"docNoDepo,omitempty"`
	GrandTotal      float64                         `protobuf:"fixed64,3,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	DepositorName   string                          `protobuf:"bytes,4,opt,name=depositorName,proto3" json:"depositorName,omitempty"`
	Merk            string                          `protobuf:"bytes,5,opt,name=merk,proto3" json:"merk,omitempty"`
	ProductName     string                          `protobuf:"bytes,6,opt,name=productName,proto3" json:"productName,omitempty"`
	CheckInDatetime string                          `protobuf:"bytes,7,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	OuCode          string                          `protobuf:"bytes,8,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	TrxInvoiceItem  []*TrxInvoiceDepositCounterItem `protobuf:"bytes,9,rep,name=trxInvoiceItem,proto3" json:"trxInvoiceItem,omitempty"`
}

func (x *ResultFindTrxDepositCounterOutstanding) Reset() {
	*x = ResultFindTrxDepositCounterOutstanding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultFindTrxDepositCounterOutstanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultFindTrxDepositCounterOutstanding) ProtoMessage() {}

func (x *ResultFindTrxDepositCounterOutstanding) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultFindTrxDepositCounterOutstanding.ProtoReflect.Descriptor instead.
func (*ResultFindTrxDepositCounterOutstanding) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{48}
}

func (x *ResultFindTrxDepositCounterOutstanding) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResultFindTrxDepositCounterOutstanding) GetDocNoDepo() string {
	if x != nil {
		return x.DocNoDepo
	}
	return ""
}

func (x *ResultFindTrxDepositCounterOutstanding) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *ResultFindTrxDepositCounterOutstanding) GetDepositorName() string {
	if x != nil {
		return x.DepositorName
	}
	return ""
}

func (x *ResultFindTrxDepositCounterOutstanding) GetMerk() string {
	if x != nil {
		return x.Merk
	}
	return ""
}

func (x *ResultFindTrxDepositCounterOutstanding) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResultFindTrxDepositCounterOutstanding) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *ResultFindTrxDepositCounterOutstanding) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *ResultFindTrxDepositCounterOutstanding) GetTrxInvoiceItem() []*TrxInvoiceDepositCounterItem {
	if x != nil {
		return x.TrxInvoiceItem
	}
	return nil
}

type TrxItemsDepositCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Draw            int64  `protobuf:"varint,1,opt,name=draw,proto3" json:"draw,omitempty"`
	Keyword         string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	DateFrom        string `protobuf:"bytes,3,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	DateTo          string `protobuf:"bytes,4,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	Limit           int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int64  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	AscDesc         string `protobuf:"bytes,7,opt,name=ascDesc,proto3" json:"ascDesc,omitempty"`
	ColumnOrderName string `protobuf:"bytes,8,opt,name=columnOrderName,proto3" json:"columnOrderName,omitempty"`
}

func (x *TrxItemsDepositCounter) Reset() {
	*x = TrxItemsDepositCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxItemsDepositCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxItemsDepositCounter) ProtoMessage() {}

func (x *TrxItemsDepositCounter) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxItemsDepositCounter.ProtoReflect.Descriptor instead.
func (*TrxItemsDepositCounter) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{49}
}

func (x *TrxItemsDepositCounter) GetDraw() int64 {
	if x != nil {
		return x.Draw
	}
	return 0
}

func (x *TrxItemsDepositCounter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *TrxItemsDepositCounter) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *TrxItemsDepositCounter) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *TrxItemsDepositCounter) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TrxItemsDepositCounter) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TrxItemsDepositCounter) GetAscDesc() string {
	if x != nil {
		return x.AscDesc
	}
	return ""
}

func (x *TrxItemsDepositCounter) GetColumnOrderName() string {
	if x != nil {
		return x.ColumnOrderName
	}
	return ""
}

type ResponseFindTrxDepositCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalData                 int64                    `protobuf:"varint,1,opt,name=totalData,proto3" json:"totalData,omitempty"`
	ListTrxDepositCounterData []*FindTrxDepositCounter `protobuf:"bytes,2,rep,name=listTrxDepositCounterData,proto3" json:"listTrxDepositCounterData,omitempty"`
}

func (x *ResponseFindTrxDepositCounter) Reset() {
	*x = ResponseFindTrxDepositCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFindTrxDepositCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFindTrxDepositCounter) ProtoMessage() {}

func (x *ResponseFindTrxDepositCounter) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFindTrxDepositCounter.ProtoReflect.Descriptor instead.
func (*ResponseFindTrxDepositCounter) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{50}
}

func (x *ResponseFindTrxDepositCounter) GetTotalData() int64 {
	if x != nil {
		return x.TotalData
	}
	return 0
}

func (x *ResponseFindTrxDepositCounter) GetListTrxDepositCounterData() []*FindTrxDepositCounter {
	if x != nil {
		return x.ListTrxDepositCounterData
	}
	return nil
}

type FindTrxDepositCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// You'll need to determine the proper representation for ObjectID in Protocol Buffers
	Id                           string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocNoDepo                    string                          `protobuf:"bytes,2,opt,name=docNoDepo,proto3" json:"docNoDepo,omitempty"`
	ProductData                  string                          `protobuf:"bytes,3,opt,name=productData,proto3" json:"productData,omitempty"`
	ProductCode                  string                          `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName                  string                          `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	Merk                         string                          `protobuf:"bytes,6,opt,name=merk,proto3" json:"merk,omitempty"`
	DepositorName                string                          `protobuf:"bytes,7,opt,name=depositorName,proto3" json:"depositorName,omitempty"`
	CheckInDatetime              string                          `protobuf:"bytes,8,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	OuId                         int64                           `protobuf:"varint,9,opt,name=ouId,proto3" json:"ouId,omitempty"`
	OuName                       string                          `protobuf:"bytes,10,opt,name=ouName,proto3" json:"ouName,omitempty"`
	OuCode                       string                          `protobuf:"bytes,11,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuSubBranchId                int64                           `protobuf:"varint,12,opt,name=ouSubBranchId,proto3" json:"ouSubBranchId,omitempty"`
	OuSubBranchName              string                          `protobuf:"bytes,13,opt,name=ouSubBranchName,proto3" json:"ouSubBranchName,omitempty"`
	OuSubBranchCode              string                          `protobuf:"bytes,14,opt,name=ouSubBranchCode,proto3" json:"ouSubBranchCode,omitempty"`
	MainOuId                     int64                           `protobuf:"varint,15,opt,name=mainOuId,proto3" json:"mainOuId,omitempty"`
	MainOuCode                   string                          `protobuf:"bytes,16,opt,name=mainOuCode,proto3" json:"mainOuCode,omitempty"`
	MainOuName                   string                          `protobuf:"bytes,17,opt,name=mainOuName,proto3" json:"mainOuName,omitempty"`
	QrText                       string                          `protobuf:"bytes,18,opt,name=qrText,proto3" json:"qrText,omitempty"`
	TrxInvoiceItemDepositCounter []*TrxInvoiceDepositCounterItem `protobuf:"bytes,19,rep,name=trxInvoiceItemDepositCounter,proto3" json:"trxInvoiceItemDepositCounter,omitempty"`
	Username                     string                          `protobuf:"bytes,20,opt,name=username,proto3" json:"username,omitempty"`
	ShiftCode                    string                          `protobuf:"bytes,21,opt,name=shiftCode,proto3" json:"shiftCode,omitempty"`
}

func (x *FindTrxDepositCounter) Reset() {
	*x = FindTrxDepositCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTrxDepositCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTrxDepositCounter) ProtoMessage() {}

func (x *FindTrxDepositCounter) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTrxDepositCounter.ProtoReflect.Descriptor instead.
func (*FindTrxDepositCounter) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{51}
}

func (x *FindTrxDepositCounter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FindTrxDepositCounter) GetDocNoDepo() string {
	if x != nil {
		return x.DocNoDepo
	}
	return ""
}

func (x *FindTrxDepositCounter) GetProductData() string {
	if x != nil {
		return x.ProductData
	}
	return ""
}

func (x *FindTrxDepositCounter) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *FindTrxDepositCounter) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *FindTrxDepositCounter) GetMerk() string {
	if x != nil {
		return x.Merk
	}
	return ""
}

func (x *FindTrxDepositCounter) GetDepositorName() string {
	if x != nil {
		return x.DepositorName
	}
	return ""
}

func (x *FindTrxDepositCounter) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *FindTrxDepositCounter) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *FindTrxDepositCounter) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *FindTrxDepositCounter) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *FindTrxDepositCounter) GetOuSubBranchId() int64 {
	if x != nil {
		return x.OuSubBranchId
	}
	return 0
}

func (x *FindTrxDepositCounter) GetOuSubBranchName() string {
	if x != nil {
		return x.OuSubBranchName
	}
	return ""
}

func (x *FindTrxDepositCounter) GetOuSubBranchCode() string {
	if x != nil {
		return x.OuSubBranchCode
	}
	return ""
}

func (x *FindTrxDepositCounter) GetMainOuId() int64 {
	if x != nil {
		return x.MainOuId
	}
	return 0
}

func (x *FindTrxDepositCounter) GetMainOuCode() string {
	if x != nil {
		return x.MainOuCode
	}
	return ""
}

func (x *FindTrxDepositCounter) GetMainOuName() string {
	if x != nil {
		return x.MainOuName
	}
	return ""
}

func (x *FindTrxDepositCounter) GetQrText() string {
	if x != nil {
		return x.QrText
	}
	return ""
}

func (x *FindTrxDepositCounter) GetTrxInvoiceItemDepositCounter() []*TrxInvoiceDepositCounterItem {
	if x != nil {
		return x.TrxInvoiceItemDepositCounter
	}
	return nil
}

func (x *FindTrxDepositCounter) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FindTrxDepositCounter) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

type ResultInquiryTrxCustomDepositCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocNo         string  `protobuf:"bytes,2,opt,name=docNo,proto3" json:"docNo,omitempty"`
	Nominal       float64 `protobuf:"fixed64,3,opt,name=nominal,proto3" json:"nominal,omitempty"`
	ProductCode   string  `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName   string  `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	DepositorName string  `protobuf:"bytes,6,opt,name=depositorName,proto3" json:"depositorName,omitempty"`
	Merk          string  `protobuf:"bytes,7,opt,name=merk,proto3" json:"merk,omitempty"`
	QrCode        string  `protobuf:"bytes,8,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	Type          string  `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	ExcludeSf     bool    `protobuf:"varint,10,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
	OuCode        string  `protobuf:"bytes,11,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
}

func (x *ResultInquiryTrxCustomDepositCounter) Reset() {
	*x = ResultInquiryTrxCustomDepositCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultInquiryTrxCustomDepositCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultInquiryTrxCustomDepositCounter) ProtoMessage() {}

func (x *ResultInquiryTrxCustomDepositCounter) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultInquiryTrxCustomDepositCounter.ProtoReflect.Descriptor instead.
func (*ResultInquiryTrxCustomDepositCounter) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{52}
}

func (x *ResultInquiryTrxCustomDepositCounter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResultInquiryTrxCustomDepositCounter) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResultInquiryTrxCustomDepositCounter) GetNominal() float64 {
	if x != nil {
		return x.Nominal
	}
	return 0
}

func (x *ResultInquiryTrxCustomDepositCounter) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ResultInquiryTrxCustomDepositCounter) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResultInquiryTrxCustomDepositCounter) GetDepositorName() string {
	if x != nil {
		return x.DepositorName
	}
	return ""
}

func (x *ResultInquiryTrxCustomDepositCounter) GetMerk() string {
	if x != nil {
		return x.Merk
	}
	return ""
}

func (x *ResultInquiryTrxCustomDepositCounter) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *ResultInquiryTrxCustomDepositCounter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResultInquiryTrxCustomDepositCounter) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

func (x *ResultInquiryTrxCustomDepositCounter) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

type Decrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *Decrypt) Reset() {
	*x = Decrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decrypt) ProtoMessage() {}

func (x *Decrypt) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decrypt.ProtoReflect.Descriptor instead.
func (*Decrypt) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{53}
}

func (x *Decrypt) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type TrxCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo                        string                          `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	DocDate                      string                          `protobuf:"bytes,2,opt,name=docDate,proto3" json:"docDate,omitempty"`
	ExtDocNo                     string                          `protobuf:"bytes,3,opt,name=extDocNo,proto3" json:"extDocNo,omitempty"`
	CheckInDatetime              string                          `protobuf:"bytes,4,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	CheckOutDatetime             string                          `protobuf:"bytes,5,opt,name=checkOutDatetime,proto3" json:"checkOutDatetime,omitempty"`
	DeviceIdIn                   string                          `protobuf:"bytes,6,opt,name=deviceIdIn,proto3" json:"deviceIdIn,omitempty"`
	DeviceId                     string                          `protobuf:"bytes,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	GateIn                       string                          `protobuf:"bytes,8,opt,name=gateIn,proto3" json:"gateIn,omitempty"`
	GateOut                      string                          `protobuf:"bytes,9,opt,name=gateOut,proto3" json:"gateOut,omitempty"`
	CardNumberUUIDIn             string                          `protobuf:"bytes,10,opt,name=cardNumberUUIDIn,proto3" json:"cardNumberUUIDIn,omitempty"`
	CardNumberIn                 string                          `protobuf:"bytes,11,opt,name=cardNumberIn,proto3" json:"cardNumberIn,omitempty"`
	CardNumberUUID               string                          `protobuf:"bytes,12,opt,name=cardNumberUUID,proto3" json:"cardNumberUUID,omitempty"`
	CardNumber                   string                          `protobuf:"bytes,13,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	TypeCard                     string                          `protobuf:"bytes,14,opt,name=typeCard,proto3" json:"typeCard,omitempty"`
	BeginningBalance             float64                         `protobuf:"fixed64,15,opt,name=beginningBalance,proto3" json:"beginningBalance,omitempty"`
	ExtLocalDatetime             string                          `protobuf:"bytes,16,opt,name=extLocalDatetime,proto3" json:"extLocalDatetime,omitempty"`
	GrandTotal                   float64                         `protobuf:"fixed64,17,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	ChargeAmount                 float64                         `protobuf:"fixed64,18,opt,name=chargeAmount,proto3" json:"chargeAmount,omitempty"`
	ProductId                    int64                           `protobuf:"varint,19,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductCode                  string                          `protobuf:"bytes,20,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName                  string                          `protobuf:"bytes,21,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductMembershipId          int64                           `protobuf:"varint,22,opt,name=productMembershipId,proto3" json:"productMembershipId,omitempty"`
	ProductMembershipCode        string                          `protobuf:"bytes,23,opt,name=productMembershipCode,proto3" json:"productMembershipCode,omitempty"`
	ProductMembershipName        string                          `protobuf:"bytes,24,opt,name=productMembershipName,proto3" json:"productMembershipName,omitempty"`
	IsPctServiceFee              string                          `protobuf:"bytes,25,opt,name=isPctServiceFee,proto3" json:"isPctServiceFee,omitempty"`
	ServiceFee                   float64                         `protobuf:"fixed64,26,opt,name=serviceFee,proto3" json:"serviceFee,omitempty"`
	ServiceFeeMember             float64                         `protobuf:"fixed64,27,opt,name=serviceFeeMember,proto3" json:"serviceFeeMember,omitempty"`
	DueDate                      int64                           `protobuf:"varint,28,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	DiscType                     string                          `protobuf:"bytes,29,opt,name=discType,proto3" json:"discType,omitempty"`
	DiscPct                      int64                           `protobuf:"varint,30,opt,name=discPct,proto3" json:"discPct,omitempty"`
	DiscAmount                   float64                         `protobuf:"fixed64,31,opt,name=discAmount,proto3" json:"discAmount,omitempty"`
	GracePeriodDate              int64                           `protobuf:"varint,32,opt,name=gracePeriodDate,proto3" json:"gracePeriodDate,omitempty"`
	ProductData                  string                          `protobuf:"bytes,33,opt,name=productData,proto3" json:"productData,omitempty"`
	RequestData                  string                          `protobuf:"bytes,34,opt,name=requestData,proto3" json:"requestData,omitempty"`
	RequestOutData               string                          `protobuf:"bytes,35,opt,name=requestOutData,proto3" json:"requestOutData,omitempty"`
	OuId                         int64                           `protobuf:"varint,36,opt,name=ouId,proto3" json:"ouId,omitempty"`
	OuName                       string                          `protobuf:"bytes,37,opt,name=ouName,proto3" json:"ouName,omitempty"`
	OuCode                       string                          `protobuf:"bytes,38,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuSubBranchId                int64                           `protobuf:"varint,39,opt,name=ouSubBranchId,proto3" json:"ouSubBranchId,omitempty"`
	OuSubBranchName              string                          `protobuf:"bytes,40,opt,name=ouSubBranchName,proto3" json:"ouSubBranchName,omitempty"`
	OuSubBranchCode              string                          `protobuf:"bytes,41,opt,name=ouSubBranchCode,proto3" json:"ouSubBranchCode,omitempty"`
	MainOuId                     int64                           `protobuf:"varint,42,opt,name=mainOuId,proto3" json:"mainOuId,omitempty"`
	MainOuCode                   string                          `protobuf:"bytes,43,opt,name=mainOuCode,proto3" json:"mainOuCode,omitempty"`
	MainOuName                   string                          `protobuf:"bytes,44,opt,name=mainOuName,proto3" json:"mainOuName,omitempty"`
	Price                        float64                         `protobuf:"fixed64,45,opt,name=price,proto3" json:"price,omitempty"`
	LogTrans                     string                          `protobuf:"bytes,46,opt,name=logTrans,proto3" json:"logTrans,omitempty"`
	QrText                       string                          `protobuf:"bytes,47,opt,name=qrText,proto3" json:"qrText,omitempty"`
	MerchantKey                  string                          `protobuf:"bytes,48,opt,name=merchantKey,proto3" json:"merchantKey,omitempty"`
	TrxInvoiceItemDepositCounter []*TrxInvoiceDepositCounterItem `protobuf:"bytes,49,rep,name=trxInvoiceItemDepositCounter,proto3" json:"trxInvoiceItemDepositCounter,omitempty"`
	TrxInvoiceItemMemberDeposit  []*TrxInvoiceMemberDeposit      `protobuf:"bytes,50,rep,name=trxInvoiceItemMemberDeposit,proto3" json:"trxInvoiceItemMemberDeposit,omitempty"`
	FlagSyncData                 bool                            `protobuf:"varint,51,opt,name=flagSyncData,proto3" json:"flagSyncData,omitempty"`
	MemberData                   *TrxMember                      `protobuf:"bytes,52,opt,name=memberData,proto3" json:"memberData,omitempty"`
	FlagTrxFromCloud             bool                            `protobuf:"varint,53,opt,name=flagTrxFromCloud,proto3" json:"flagTrxFromCloud,omitempty"`
	IsRsyncDataTrx               bool                            `protobuf:"varint,54,opt,name=isRsyncDataTrx,proto3" json:"isRsyncDataTrx,omitempty"`
	ExcludeSf                    bool                            `protobuf:"varint,55,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
	FlagCharge                   bool                            `protobuf:"varint,56,opt,name=flagCharge,proto3" json:"flagCharge,omitempty"`
	FlgDepositCounter            bool                            `protobuf:"varint,57,opt,name=flgDepositCounter,proto3" json:"flgDepositCounter,omitempty"`
}

func (x *TrxCustom) Reset() {
	*x = TrxCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxCustom) ProtoMessage() {}

func (x *TrxCustom) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxCustom.ProtoReflect.Descriptor instead.
func (*TrxCustom) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{54}
}

func (x *TrxCustom) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *TrxCustom) GetDocDate() string {
	if x != nil {
		return x.DocDate
	}
	return ""
}

func (x *TrxCustom) GetExtDocNo() string {
	if x != nil {
		return x.ExtDocNo
	}
	return ""
}

func (x *TrxCustom) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *TrxCustom) GetCheckOutDatetime() string {
	if x != nil {
		return x.CheckOutDatetime
	}
	return ""
}

func (x *TrxCustom) GetDeviceIdIn() string {
	if x != nil {
		return x.DeviceIdIn
	}
	return ""
}

func (x *TrxCustom) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TrxCustom) GetGateIn() string {
	if x != nil {
		return x.GateIn
	}
	return ""
}

func (x *TrxCustom) GetGateOut() string {
	if x != nil {
		return x.GateOut
	}
	return ""
}

func (x *TrxCustom) GetCardNumberUUIDIn() string {
	if x != nil {
		return x.CardNumberUUIDIn
	}
	return ""
}

func (x *TrxCustom) GetCardNumberIn() string {
	if x != nil {
		return x.CardNumberIn
	}
	return ""
}

func (x *TrxCustom) GetCardNumberUUID() string {
	if x != nil {
		return x.CardNumberUUID
	}
	return ""
}

func (x *TrxCustom) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *TrxCustom) GetTypeCard() string {
	if x != nil {
		return x.TypeCard
	}
	return ""
}

func (x *TrxCustom) GetBeginningBalance() float64 {
	if x != nil {
		return x.BeginningBalance
	}
	return 0
}

func (x *TrxCustom) GetExtLocalDatetime() string {
	if x != nil {
		return x.ExtLocalDatetime
	}
	return ""
}

func (x *TrxCustom) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *TrxCustom) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *TrxCustom) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *TrxCustom) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TrxCustom) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *TrxCustom) GetProductMembershipId() int64 {
	if x != nil {
		return x.ProductMembershipId
	}
	return 0
}

func (x *TrxCustom) GetProductMembershipCode() string {
	if x != nil {
		return x.ProductMembershipCode
	}
	return ""
}

func (x *TrxCustom) GetProductMembershipName() string {
	if x != nil {
		return x.ProductMembershipName
	}
	return ""
}

func (x *TrxCustom) GetIsPctServiceFee() string {
	if x != nil {
		return x.IsPctServiceFee
	}
	return ""
}

func (x *TrxCustom) GetServiceFee() float64 {
	if x != nil {
		return x.ServiceFee
	}
	return 0
}

func (x *TrxCustom) GetServiceFeeMember() float64 {
	if x != nil {
		return x.ServiceFeeMember
	}
	return 0
}

func (x *TrxCustom) GetDueDate() int64 {
	if x != nil {
		return x.DueDate
	}
	return 0
}

func (x *TrxCustom) GetDiscType() string {
	if x != nil {
		return x.DiscType
	}
	return ""
}

func (x *TrxCustom) GetDiscPct() int64 {
	if x != nil {
		return x.DiscPct
	}
	return 0
}

func (x *TrxCustom) GetDiscAmount() float64 {
	if x != nil {
		return x.DiscAmount
	}
	return 0
}

func (x *TrxCustom) GetGracePeriodDate() int64 {
	if x != nil {
		return x.GracePeriodDate
	}
	return 0
}

func (x *TrxCustom) GetProductData() string {
	if x != nil {
		return x.ProductData
	}
	return ""
}

func (x *TrxCustom) GetRequestData() string {
	if x != nil {
		return x.RequestData
	}
	return ""
}

func (x *TrxCustom) GetRequestOutData() string {
	if x != nil {
		return x.RequestOutData
	}
	return ""
}

func (x *TrxCustom) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *TrxCustom) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *TrxCustom) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *TrxCustom) GetOuSubBranchId() int64 {
	if x != nil {
		return x.OuSubBranchId
	}
	return 0
}

func (x *TrxCustom) GetOuSubBranchName() string {
	if x != nil {
		return x.OuSubBranchName
	}
	return ""
}

func (x *TrxCustom) GetOuSubBranchCode() string {
	if x != nil {
		return x.OuSubBranchCode
	}
	return ""
}

func (x *TrxCustom) GetMainOuId() int64 {
	if x != nil {
		return x.MainOuId
	}
	return 0
}

func (x *TrxCustom) GetMainOuCode() string {
	if x != nil {
		return x.MainOuCode
	}
	return ""
}

func (x *TrxCustom) GetMainOuName() string {
	if x != nil {
		return x.MainOuName
	}
	return ""
}

func (x *TrxCustom) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TrxCustom) GetLogTrans() string {
	if x != nil {
		return x.LogTrans
	}
	return ""
}

func (x *TrxCustom) GetQrText() string {
	if x != nil {
		return x.QrText
	}
	return ""
}

func (x *TrxCustom) GetMerchantKey() string {
	if x != nil {
		return x.MerchantKey
	}
	return ""
}

func (x *TrxCustom) GetTrxInvoiceItemDepositCounter() []*TrxInvoiceDepositCounterItem {
	if x != nil {
		return x.TrxInvoiceItemDepositCounter
	}
	return nil
}

func (x *TrxCustom) GetTrxInvoiceItemMemberDeposit() []*TrxInvoiceMemberDeposit {
	if x != nil {
		return x.TrxInvoiceItemMemberDeposit
	}
	return nil
}

func (x *TrxCustom) GetFlagSyncData() bool {
	if x != nil {
		return x.FlagSyncData
	}
	return false
}

func (x *TrxCustom) GetMemberData() *TrxMember {
	if x != nil {
		return x.MemberData
	}
	return nil
}

func (x *TrxCustom) GetFlagTrxFromCloud() bool {
	if x != nil {
		return x.FlagTrxFromCloud
	}
	return false
}

func (x *TrxCustom) GetIsRsyncDataTrx() bool {
	if x != nil {
		return x.IsRsyncDataTrx
	}
	return false
}

func (x *TrxCustom) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

func (x *TrxCustom) GetFlagCharge() bool {
	if x != nil {
		return x.FlagCharge
	}
	return false
}

func (x *TrxCustom) GetFlgDepositCounter() bool {
	if x != nil {
		return x.FlgDepositCounter
	}
	return false
}

type TrxInvoiceMemberDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNoDepo             string  `protobuf:"bytes,1,opt,name=docNoDepo,proto3" json:"docNoDepo,omitempty"`
	PartnerCode           string  `protobuf:"bytes,2,opt,name=partnerCode,proto3" json:"partnerCode,omitempty"`
	ProductId             int64   `protobuf:"varint,3,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductCode           string  `protobuf:"bytes,4,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName           string  `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductMembershipId   int64   `protobuf:"varint,6,opt,name=productMembershipId,proto3" json:"productMembershipId,omitempty"`
	ProductMembershipCode string  `protobuf:"bytes,7,opt,name=productMembershipCode,proto3" json:"productMembershipCode,omitempty"`
	ProductMembershipName string  `protobuf:"bytes,8,opt,name=productMembershipName,proto3" json:"productMembershipName,omitempty"`
	IsPctServiceFee       string  `protobuf:"bytes,9,opt,name=isPctServiceFee,proto3" json:"isPctServiceFee,omitempty"`
	ServiceFee            float64 `protobuf:"fixed64,10,opt,name=serviceFee,proto3" json:"serviceFee,omitempty"`
	ServiceFeeMember      float64 `protobuf:"fixed64,11,opt,name=serviceFeeMember,proto3" json:"serviceFeeMember,omitempty"`
	DueDate               int64   `protobuf:"varint,12,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	DiscType              string  `protobuf:"bytes,13,opt,name=discType,proto3" json:"discType,omitempty"`
	DiscPct               int64   `protobuf:"varint,14,opt,name=discPct,proto3" json:"discPct,omitempty"`
	DiscAmount            float64 `protobuf:"fixed64,15,opt,name=discAmount,proto3" json:"discAmount,omitempty"`
	GracePeriodDate       int64   `protobuf:"varint,16,opt,name=gracePeriodDate,proto3" json:"gracePeriodDate,omitempty"`
	Price                 float64 `protobuf:"fixed64,17,opt,name=price,proto3" json:"price,omitempty"`
	TotalAmount           float64 `protobuf:"fixed64,18,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
}

func (x *TrxInvoiceMemberDeposit) Reset() {
	*x = TrxInvoiceMemberDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxInvoiceMemberDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxInvoiceMemberDeposit) ProtoMessage() {}

func (x *TrxInvoiceMemberDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxInvoiceMemberDeposit.ProtoReflect.Descriptor instead.
func (*TrxInvoiceMemberDeposit) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{55}
}

func (x *TrxInvoiceMemberDeposit) GetDocNoDepo() string {
	if x != nil {
		return x.DocNoDepo
	}
	return ""
}

func (x *TrxInvoiceMemberDeposit) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *TrxInvoiceMemberDeposit) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *TrxInvoiceMemberDeposit) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TrxInvoiceMemberDeposit) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *TrxInvoiceMemberDeposit) GetProductMembershipId() int64 {
	if x != nil {
		return x.ProductMembershipId
	}
	return 0
}

func (x *TrxInvoiceMemberDeposit) GetProductMembershipCode() string {
	if x != nil {
		return x.ProductMembershipCode
	}
	return ""
}

func (x *TrxInvoiceMemberDeposit) GetProductMembershipName() string {
	if x != nil {
		return x.ProductMembershipName
	}
	return ""
}

func (x *TrxInvoiceMemberDeposit) GetIsPctServiceFee() string {
	if x != nil {
		return x.IsPctServiceFee
	}
	return ""
}

func (x *TrxInvoiceMemberDeposit) GetServiceFee() float64 {
	if x != nil {
		return x.ServiceFee
	}
	return 0
}

func (x *TrxInvoiceMemberDeposit) GetServiceFeeMember() float64 {
	if x != nil {
		return x.ServiceFeeMember
	}
	return 0
}

func (x *TrxInvoiceMemberDeposit) GetDueDate() int64 {
	if x != nil {
		return x.DueDate
	}
	return 0
}

func (x *TrxInvoiceMemberDeposit) GetDiscType() string {
	if x != nil {
		return x.DiscType
	}
	return ""
}

func (x *TrxInvoiceMemberDeposit) GetDiscPct() int64 {
	if x != nil {
		return x.DiscPct
	}
	return 0
}

func (x *TrxInvoiceMemberDeposit) GetDiscAmount() float64 {
	if x != nil {
		return x.DiscAmount
	}
	return 0
}

func (x *TrxInvoiceMemberDeposit) GetGracePeriodDate() int64 {
	if x != nil {
		return x.GracePeriodDate
	}
	return 0
}

func (x *TrxInvoiceMemberDeposit) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TrxInvoiceMemberDeposit) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type RequestInquiryPaymentQris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo         string  `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductCode   string  `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName   string  `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	PaymentMethod string  `protobuf:"bytes,4,opt,name=paymentMethod,proto3" json:"paymentMethod,omitempty"`
	GrandTotal    float64 `protobuf:"fixed64,5,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	MKey          string  `protobuf:"bytes,6,opt,name=mKey,proto3" json:"mKey,omitempty"`
}

func (x *RequestInquiryPaymentQris) Reset() {
	*x = RequestInquiryPaymentQris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInquiryPaymentQris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInquiryPaymentQris) ProtoMessage() {}

func (x *RequestInquiryPaymentQris) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInquiryPaymentQris.ProtoReflect.Descriptor instead.
func (*RequestInquiryPaymentQris) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{56}
}

func (x *RequestInquiryPaymentQris) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *RequestInquiryPaymentQris) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RequestInquiryPaymentQris) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *RequestInquiryPaymentQris) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *RequestInquiryPaymentQris) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *RequestInquiryPaymentQris) GetMKey() string {
	if x != nil {
		return x.MKey
	}
	return ""
}

type ResponseInquiryQris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	QrCode          string `protobuf:"bytes,2,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	PaymentRefDocNo string `protobuf:"bytes,3,opt,name=paymentRefDocNo,proto3" json:"paymentRefDocNo,omitempty"`
}

func (x *ResponseInquiryQris) Reset() {
	*x = ResponseInquiryQris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseInquiryQris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInquiryQris) ProtoMessage() {}

func (x *ResponseInquiryQris) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInquiryQris.ProtoReflect.Descriptor instead.
func (*ResponseInquiryQris) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{57}
}

func (x *ResponseInquiryQris) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResponseInquiryQris) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *ResponseInquiryQris) GetPaymentRefDocNo() string {
	if x != nil {
		return x.PaymentRefDocNo
	}
	return ""
}

type ResponseConfirmLostTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo                 string  `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	PaymentMethod         string  `protobuf:"bytes,2,opt,name=paymentMethod,proto3" json:"paymentMethod,omitempty"`
	ProductName           string  `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	CardNumber            string  `protobuf:"bytes,4,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	CardType              string  `protobuf:"bytes,5,opt,name=cardType,proto3" json:"cardType,omitempty"`
	LostTicketInDatetime  string  `protobuf:"bytes,6,opt,name=lostTicketInDatetime,proto3" json:"lostTicketInDatetime,omitempty"`
	LostTicketOutDatetime string  `protobuf:"bytes,7,opt,name=lostTicketOutDatetime,proto3" json:"lostTicketOutDatetime,omitempty"`
	VehicleNumberIn       string  `protobuf:"bytes,8,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	VehicleNumberOut      string  `protobuf:"bytes,9,opt,name=vehicleNumberOut,proto3" json:"vehicleNumberOut,omitempty"`
	UuidCard              string  `protobuf:"bytes,10,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	QrCodeLostTicket      string  `protobuf:"bytes,11,opt,name=qrCodeLostTicket,proto3" json:"qrCodeLostTicket,omitempty"`
	CurrentBalance        int64   `protobuf:"varint,12,opt,name=currentBalance,proto3" json:"currentBalance,omitempty"`
	ChargeAmount          float64 `protobuf:"fixed64,13,opt,name=chargeAmount,proto3" json:"chargeAmount,omitempty"`
	GrandTotal            float64 `protobuf:"fixed64,14,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	OuCode                string  `protobuf:"bytes,15,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuName                string  `protobuf:"bytes,16,opt,name=ouName,proto3" json:"ouName,omitempty"`
	Address               string  `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	IpAddr                string  `protobuf:"bytes,18,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"`
}

func (x *ResponseConfirmLostTicket) Reset() {
	*x = ResponseConfirmLostTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseConfirmLostTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseConfirmLostTicket) ProtoMessage() {}

func (x *ResponseConfirmLostTicket) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseConfirmLostTicket.ProtoReflect.Descriptor instead.
func (*ResponseConfirmLostTicket) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{58}
}

func (x *ResponseConfirmLostTicket) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetLostTicketInDatetime() string {
	if x != nil {
		return x.LostTicketInDatetime
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetLostTicketOutDatetime() string {
	if x != nil {
		return x.LostTicketOutDatetime
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetVehicleNumberOut() string {
	if x != nil {
		return x.VehicleNumberOut
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetQrCodeLostTicket() string {
	if x != nil {
		return x.QrCodeLostTicket
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetCurrentBalance() int64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *ResponseConfirmLostTicket) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *ResponseConfirmLostTicket) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *ResponseConfirmLostTicket) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ResponseConfirmLostTicket) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

type RequestCheckStatusPaymentQris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo       string `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	MerchantKey string `protobuf:"bytes,2,opt,name=merchantKey,proto3" json:"merchantKey,omitempty"`
}

func (x *RequestCheckStatusPaymentQris) Reset() {
	*x = RequestCheckStatusPaymentQris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCheckStatusPaymentQris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCheckStatusPaymentQris) ProtoMessage() {}

func (x *RequestCheckStatusPaymentQris) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCheckStatusPaymentQris.ProtoReflect.Descriptor instead.
func (*RequestCheckStatusPaymentQris) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{59}
}

func (x *RequestCheckStatusPaymentQris) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *RequestCheckStatusPaymentQris) GetMerchantKey() string {
	if x != nil {
		return x.MerchantKey
	}
	return ""
}

type ResponseCheckStatusA2P struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcquiringID     float64 `protobuf:"fixed64,1,opt,name=acquiringID,proto3" json:"acquiringID,omitempty"`
	Amount          float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	BankNoRef       string  `protobuf:"bytes,3,opt,name=bankNoRef,proto3" json:"bankNoRef,omitempty"`
	CardPan         string  `protobuf:"bytes,4,opt,name=cardPan,proto3" json:"cardPan,omitempty"`
	CardType        string  `protobuf:"bytes,5,opt,name=cardType,proto3" json:"cardType,omitempty"`
	CorporateName   string  `protobuf:"bytes,6,opt,name=corporateName,proto3" json:"corporateName,omitempty"`
	CreatedAt       string  `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CurrentBalance  float64 `protobuf:"fixed64,8,opt,name=currentBalance,proto3" json:"currentBalance,omitempty"`
	DeviceID        string  `protobuf:"bytes,9,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Discount        float64 `protobuf:"fixed64,10,opt,name=discount,proto3" json:"discount,omitempty"`
	LastBalance     float64 `protobuf:"fixed64,11,opt,name=lastBalance,proto3" json:"lastBalance,omitempty"`
	Mdr             float64 `protobuf:"fixed64,12,opt,name=mdr,proto3" json:"mdr,omitempty"`
	Mid             string  `protobuf:"bytes,13,opt,name=mid,proto3" json:"mid,omitempty"`
	NoHeader        string  `protobuf:"bytes,14,opt,name=noHeader,proto3" json:"noHeader,omitempty"`
	PaymentCategory string  `protobuf:"bytes,15,opt,name=paymentCategory,proto3" json:"paymentCategory,omitempty"`
	PaymentFee      float64 `protobuf:"fixed64,16,opt,name=paymentFee,proto3" json:"paymentFee,omitempty"`
	PromoCode       string  `protobuf:"bytes,17,opt,name=promoCode,proto3" json:"promoCode,omitempty"`
	PromoIssuer     string  `protobuf:"bytes,18,opt,name=promoIssuer,proto3" json:"promoIssuer,omitempty"`
	ServiceFee      float64 `protobuf:"fixed64,19,opt,name=serviceFee,proto3" json:"serviceFee,omitempty"`
	SettleAt        string  `protobuf:"bytes,20,opt,name=settleAt,proto3" json:"settleAt,omitempty"`
	StatusCode      string  `protobuf:"bytes,21,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	StatusPayment   string  `protobuf:"bytes,22,opt,name=statusPayment,proto3" json:"statusPayment,omitempty"`
	Tid             string  `protobuf:"bytes,23,opt,name=tid,proto3" json:"tid,omitempty"`
}

func (x *ResponseCheckStatusA2P) Reset() {
	*x = ResponseCheckStatusA2P{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCheckStatusA2P) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCheckStatusA2P) ProtoMessage() {}

func (x *ResponseCheckStatusA2P) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCheckStatusA2P.ProtoReflect.Descriptor instead.
func (*ResponseCheckStatusA2P) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{60}
}

func (x *ResponseCheckStatusA2P) GetAcquiringID() float64 {
	if x != nil {
		return x.AcquiringID
	}
	return 0
}

func (x *ResponseCheckStatusA2P) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ResponseCheckStatusA2P) GetBankNoRef() string {
	if x != nil {
		return x.BankNoRef
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetCardPan() string {
	if x != nil {
		return x.CardPan
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetCorporateName() string {
	if x != nil {
		return x.CorporateName
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetCurrentBalance() float64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *ResponseCheckStatusA2P) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ResponseCheckStatusA2P) GetLastBalance() float64 {
	if x != nil {
		return x.LastBalance
	}
	return 0
}

func (x *ResponseCheckStatusA2P) GetMdr() float64 {
	if x != nil {
		return x.Mdr
	}
	return 0
}

func (x *ResponseCheckStatusA2P) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetNoHeader() string {
	if x != nil {
		return x.NoHeader
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetPaymentCategory() string {
	if x != nil {
		return x.PaymentCategory
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetPaymentFee() float64 {
	if x != nil {
		return x.PaymentFee
	}
	return 0
}

func (x *ResponseCheckStatusA2P) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetPromoIssuer() string {
	if x != nil {
		return x.PromoIssuer
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetServiceFee() float64 {
	if x != nil {
		return x.ServiceFee
	}
	return 0
}

func (x *ResponseCheckStatusA2P) GetSettleAt() string {
	if x != nil {
		return x.SettleAt
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetStatusPayment() string {
	if x != nil {
		return x.StatusPayment
	}
	return ""
}

func (x *ResponseCheckStatusA2P) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

type ResponseConfirmTrxVip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocNo            string  `protobuf:"bytes,1,opt,name=docNo,proto3" json:"docNo,omitempty"`
	ProductData      string  `protobuf:"bytes,2,opt,name=productData,proto3" json:"productData,omitempty"`
	ProductName      string  `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	CardNumber       string  `protobuf:"bytes,4,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	CardType         string  `protobuf:"bytes,5,opt,name=cardType,proto3" json:"cardType,omitempty"`
	CheckInDatetime  string  `protobuf:"bytes,6,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	CheckOutDatetime string  `protobuf:"bytes,7,opt,name=checkOutDatetime,proto3" json:"checkOutDatetime,omitempty"`
	VehicleNumberIn  string  `protobuf:"bytes,8,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	VehicleNumberOut string  `protobuf:"bytes,9,opt,name=vehicleNumberOut,proto3" json:"vehicleNumberOut,omitempty"`
	UuidCard         string  `protobuf:"bytes,10,opt,name=uuidCard,proto3" json:"uuidCard,omitempty"`
	ShowQRISArea     string  `protobuf:"bytes,11,opt,name=showQRISArea,proto3" json:"showQRISArea,omitempty"`
	CurrentBalance   int64   `protobuf:"varint,12,opt,name=currentBalance,proto3" json:"currentBalance,omitempty"`
	ChargeAmount     float64 `protobuf:"fixed64,13,opt,name=chargeAmount,proto3" json:"chargeAmount,omitempty"`
	GrandTotal       float64 `protobuf:"fixed64,14,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	OuCode           string  `protobuf:"bytes,15,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuName           string  `protobuf:"bytes,16,opt,name=ouName,proto3" json:"ouName,omitempty"`
	Address          string  `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	IpAddr           string  `protobuf:"bytes,18,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"`
}

func (x *ResponseConfirmTrxVip) Reset() {
	*x = ResponseConfirmTrxVip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseConfirmTrxVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseConfirmTrxVip) ProtoMessage() {}

func (x *ResponseConfirmTrxVip) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseConfirmTrxVip.ProtoReflect.Descriptor instead.
func (*ResponseConfirmTrxVip) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{61}
}

func (x *ResponseConfirmTrxVip) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetProductData() string {
	if x != nil {
		return x.ProductData
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetCheckOutDatetime() string {
	if x != nil {
		return x.CheckOutDatetime
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetVehicleNumberOut() string {
	if x != nil {
		return x.VehicleNumberOut
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetUuidCard() string {
	if x != nil {
		return x.UuidCard
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetShowQRISArea() string {
	if x != nil {
		return x.ShowQRISArea
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetCurrentBalance() int64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *ResponseConfirmTrxVip) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *ResponseConfirmTrxVip) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *ResponseConfirmTrxVip) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ResponseConfirmTrxVip) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

type TrxWithId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocNo            string                `protobuf:"bytes,2,opt,name=docNo,proto3" json:"docNo,omitempty"`
	DocDate          string                `protobuf:"bytes,3,opt,name=docDate,proto3" json:"docDate,omitempty"`
	CheckInDatetime  string                `protobuf:"bytes,4,opt,name=checkInDatetime,proto3" json:"checkInDatetime,omitempty"`
	CheckOutDatetime string                `protobuf:"bytes,5,opt,name=checkOutDatetime,proto3" json:"checkOutDatetime,omitempty"`
	DeviceIdIn       string                `protobuf:"bytes,6,opt,name=deviceIdIn,proto3" json:"deviceIdIn,omitempty"`
	DeviceId         string                `protobuf:"bytes,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	GateIn           string                `protobuf:"bytes,8,opt,name=gateIn,proto3" json:"gateIn,omitempty"`
	GateOut          string                `protobuf:"bytes,9,opt,name=gateOut,proto3" json:"gateOut,omitempty"`
	CardNumberUUIDIn string                `protobuf:"bytes,10,opt,name=cardNumberUUIDIn,proto3" json:"cardNumberUUIDIn,omitempty"`
	CardNumberIn     string                `protobuf:"bytes,11,opt,name=cardNumberIn,proto3" json:"cardNumberIn,omitempty"`
	CardNumberUUID   string                `protobuf:"bytes,12,opt,name=cardNumberUUID,proto3" json:"cardNumberUUID,omitempty"`
	CardNumber       string                `protobuf:"bytes,13,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	TypeCard         string                `protobuf:"bytes,14,opt,name=typeCard,proto3" json:"typeCard,omitempty"`
	BeginningBalance float64               `protobuf:"fixed64,15,opt,name=beginningBalance,proto3" json:"beginningBalance,omitempty"`
	ExtLocalDatetime string                `protobuf:"bytes,16,opt,name=extLocalDatetime,proto3" json:"extLocalDatetime,omitempty"`
	ChargeAmount     float64               `protobuf:"fixed64,17,opt,name=chargeAmount,proto3" json:"chargeAmount,omitempty"`
	GrandTotal       float64               `protobuf:"fixed64,18,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	ProductCode      string                `protobuf:"bytes,19,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductName      string                `protobuf:"bytes,20,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductData      string                `protobuf:"bytes,21,opt,name=productData,proto3" json:"productData,omitempty"`
	RequestData      string                `protobuf:"bytes,22,opt,name=requestData,proto3" json:"requestData,omitempty"`
	RequestOutData   string                `protobuf:"bytes,23,opt,name=requestOutData,proto3" json:"requestOutData,omitempty"`
	OuId             int64                 `protobuf:"varint,24,opt,name=ouId,proto3" json:"ouId,omitempty"`
	OuName           string                `protobuf:"bytes,25,opt,name=ouName,proto3" json:"ouName,omitempty"`
	OuCode           string                `protobuf:"bytes,26,opt,name=ouCode,proto3" json:"ouCode,omitempty"`
	OuSubBranchId    int64                 `protobuf:"varint,27,opt,name=ouSubBranchId,proto3" json:"ouSubBranchId,omitempty"`
	OuSubBranchName  string                `protobuf:"bytes,28,opt,name=ouSubBranchName,proto3" json:"ouSubBranchName,omitempty"`
	OuSubBranchCode  string                `protobuf:"bytes,29,opt,name=ouSubBranchCode,proto3" json:"ouSubBranchCode,omitempty"`
	MainOuId         int64                 `protobuf:"varint,30,opt,name=mainOuId,proto3" json:"mainOuId,omitempty"`
	MainOuCode       string                `protobuf:"bytes,31,opt,name=mainOuCode,proto3" json:"mainOuCode,omitempty"`
	MainOuName       string                `protobuf:"bytes,32,opt,name=mainOuName,proto3" json:"mainOuName,omitempty"`
	MemberCode       string                `protobuf:"bytes,33,opt,name=memberCode,proto3" json:"memberCode,omitempty"`
	MemberName       string                `protobuf:"bytes,34,opt,name=memberName,proto3" json:"memberName,omitempty"`
	MemberType       string                `protobuf:"bytes,35,opt,name=memberType,proto3" json:"memberType,omitempty"`
	CheckInTime      int64                 `protobuf:"varint,36,opt,name=checkInTime,proto3" json:"checkInTime,omitempty"`
	CheckOutTime     int64                 `protobuf:"varint,37,opt,name=checkOutTime,proto3" json:"checkOutTime,omitempty"`
	DurationTime     int64                 `protobuf:"varint,38,opt,name=durationTime,proto3" json:"durationTime,omitempty"`
	VehicleNumberIn  string                `protobuf:"bytes,39,opt,name=vehicleNumberIn,proto3" json:"vehicleNumberIn,omitempty"`
	VehicleNumberOut string                `protobuf:"bytes,40,opt,name=vehicleNumberOut,proto3" json:"vehicleNumberOut,omitempty"`
	LogTrans         string                `protobuf:"bytes,41,opt,name=logTrans,proto3" json:"logTrans,omitempty"`
	MerchantKey      string                `protobuf:"bytes,42,opt,name=merchantKey,proto3" json:"merchantKey,omitempty"`
	QrText           string                `protobuf:"bytes,43,opt,name=qrText,proto3" json:"qrText,omitempty"`
	TrxInvoiceItem   []*TrxInvoiceItem     `protobuf:"bytes,44,rep,name=trxInvoiceItem,proto3" json:"trxInvoiceItem,omitempty"` // Assuming TrxInvoiceItem is defined
	FlagSyncData     bool                  `protobuf:"varint,45,opt,name=flagSyncData,proto3" json:"flagSyncData,omitempty"`
	MemberData       *TrxMember            `protobuf:"bytes,46,opt,name=memberData,proto3" json:"memberData,omitempty"`                                                                                         // Assuming TrxMember is defined
	TrxAddInfo       map[string]*anypb.Any `protobuf:"bytes,47,rep,name=trxAddInfo,proto3" json:"trxAddInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Represents map<string, interface{}>
	FlagTrxFromCloud bool                  `protobuf:"varint,48,opt,name=flagTrxFromCloud,proto3" json:"flagTrxFromCloud,omitempty"`
	IsRsyncDataTrx   bool                  `protobuf:"varint,49,opt,name=isRsyncDataTrx,proto3" json:"isRsyncDataTrx,omitempty"`
	ExcludeSf        bool                  `protobuf:"varint,50,opt,name=excludeSf,proto3" json:"excludeSf,omitempty"`
	FlagCharge       bool                  `protobuf:"varint,51,opt,name=flagCharge,proto3" json:"flagCharge,omitempty"`
	ChargeType       string                `protobuf:"bytes,52,opt,name=chargeType,proto3" json:"chargeType,omitempty"`
	QrTextLostTicket string                `protobuf:"bytes,53,opt,name=qrTextLostTicket,proto3" json:"qrTextLostTicket,omitempty"`  // As it's a pointer in Go, it's optional in protobuf
	StatusLostTicket bool                  `protobuf:"varint,54,opt,name=statusLostTicket,proto3" json:"statusLostTicket,omitempty"` // Same as above, optional
}

func (x *TrxWithId) Reset() {
	*x = TrxWithId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxWithId) ProtoMessage() {}

func (x *TrxWithId) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxWithId.ProtoReflect.Descriptor instead.
func (*TrxWithId) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{62}
}

func (x *TrxWithId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrxWithId) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *TrxWithId) GetDocDate() string {
	if x != nil {
		return x.DocDate
	}
	return ""
}

func (x *TrxWithId) GetCheckInDatetime() string {
	if x != nil {
		return x.CheckInDatetime
	}
	return ""
}

func (x *TrxWithId) GetCheckOutDatetime() string {
	if x != nil {
		return x.CheckOutDatetime
	}
	return ""
}

func (x *TrxWithId) GetDeviceIdIn() string {
	if x != nil {
		return x.DeviceIdIn
	}
	return ""
}

func (x *TrxWithId) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TrxWithId) GetGateIn() string {
	if x != nil {
		return x.GateIn
	}
	return ""
}

func (x *TrxWithId) GetGateOut() string {
	if x != nil {
		return x.GateOut
	}
	return ""
}

func (x *TrxWithId) GetCardNumberUUIDIn() string {
	if x != nil {
		return x.CardNumberUUIDIn
	}
	return ""
}

func (x *TrxWithId) GetCardNumberIn() string {
	if x != nil {
		return x.CardNumberIn
	}
	return ""
}

func (x *TrxWithId) GetCardNumberUUID() string {
	if x != nil {
		return x.CardNumberUUID
	}
	return ""
}

func (x *TrxWithId) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *TrxWithId) GetTypeCard() string {
	if x != nil {
		return x.TypeCard
	}
	return ""
}

func (x *TrxWithId) GetBeginningBalance() float64 {
	if x != nil {
		return x.BeginningBalance
	}
	return 0
}

func (x *TrxWithId) GetExtLocalDatetime() string {
	if x != nil {
		return x.ExtLocalDatetime
	}
	return ""
}

func (x *TrxWithId) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *TrxWithId) GetGrandTotal() float64 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *TrxWithId) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TrxWithId) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *TrxWithId) GetProductData() string {
	if x != nil {
		return x.ProductData
	}
	return ""
}

func (x *TrxWithId) GetRequestData() string {
	if x != nil {
		return x.RequestData
	}
	return ""
}

func (x *TrxWithId) GetRequestOutData() string {
	if x != nil {
		return x.RequestOutData
	}
	return ""
}

func (x *TrxWithId) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *TrxWithId) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *TrxWithId) GetOuCode() string {
	if x != nil {
		return x.OuCode
	}
	return ""
}

func (x *TrxWithId) GetOuSubBranchId() int64 {
	if x != nil {
		return x.OuSubBranchId
	}
	return 0
}

func (x *TrxWithId) GetOuSubBranchName() string {
	if x != nil {
		return x.OuSubBranchName
	}
	return ""
}

func (x *TrxWithId) GetOuSubBranchCode() string {
	if x != nil {
		return x.OuSubBranchCode
	}
	return ""
}

func (x *TrxWithId) GetMainOuId() int64 {
	if x != nil {
		return x.MainOuId
	}
	return 0
}

func (x *TrxWithId) GetMainOuCode() string {
	if x != nil {
		return x.MainOuCode
	}
	return ""
}

func (x *TrxWithId) GetMainOuName() string {
	if x != nil {
		return x.MainOuName
	}
	return ""
}

func (x *TrxWithId) GetMemberCode() string {
	if x != nil {
		return x.MemberCode
	}
	return ""
}

func (x *TrxWithId) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *TrxWithId) GetMemberType() string {
	if x != nil {
		return x.MemberType
	}
	return ""
}

func (x *TrxWithId) GetCheckInTime() int64 {
	if x != nil {
		return x.CheckInTime
	}
	return 0
}

func (x *TrxWithId) GetCheckOutTime() int64 {
	if x != nil {
		return x.CheckOutTime
	}
	return 0
}

func (x *TrxWithId) GetDurationTime() int64 {
	if x != nil {
		return x.DurationTime
	}
	return 0
}

func (x *TrxWithId) GetVehicleNumberIn() string {
	if x != nil {
		return x.VehicleNumberIn
	}
	return ""
}

func (x *TrxWithId) GetVehicleNumberOut() string {
	if x != nil {
		return x.VehicleNumberOut
	}
	return ""
}

func (x *TrxWithId) GetLogTrans() string {
	if x != nil {
		return x.LogTrans
	}
	return ""
}

func (x *TrxWithId) GetMerchantKey() string {
	if x != nil {
		return x.MerchantKey
	}
	return ""
}

func (x *TrxWithId) GetQrText() string {
	if x != nil {
		return x.QrText
	}
	return ""
}

func (x *TrxWithId) GetTrxInvoiceItem() []*TrxInvoiceItem {
	if x != nil {
		return x.TrxInvoiceItem
	}
	return nil
}

func (x *TrxWithId) GetFlagSyncData() bool {
	if x != nil {
		return x.FlagSyncData
	}
	return false
}

func (x *TrxWithId) GetMemberData() *TrxMember {
	if x != nil {
		return x.MemberData
	}
	return nil
}

func (x *TrxWithId) GetTrxAddInfo() map[string]*anypb.Any {
	if x != nil {
		return x.TrxAddInfo
	}
	return nil
}

func (x *TrxWithId) GetFlagTrxFromCloud() bool {
	if x != nil {
		return x.FlagTrxFromCloud
	}
	return false
}

func (x *TrxWithId) GetIsRsyncDataTrx() bool {
	if x != nil {
		return x.IsRsyncDataTrx
	}
	return false
}

func (x *TrxWithId) GetExcludeSf() bool {
	if x != nil {
		return x.ExcludeSf
	}
	return false
}

func (x *TrxWithId) GetFlagCharge() bool {
	if x != nil {
		return x.FlagCharge
	}
	return false
}

func (x *TrxWithId) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *TrxWithId) GetQrTextLostTicket() string {
	if x != nil {
		return x.QrTextLostTicket
	}
	return ""
}

func (x *TrxWithId) GetStatusLostTicket() bool {
	if x != nil {
		return x.StatusLostTicket
	}
	return false
}

type ResponseIDTrxOutstanding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResponseIDTrxOutstanding) Reset() {
	*x = ResponseIDTrxOutstanding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseIDTrxOutstanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseIDTrxOutstanding) ProtoMessage() {}

func (x *ResponseIDTrxOutstanding) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseIDTrxOutstanding.ProtoReflect.Descriptor instead.
func (*ResponseIDTrxOutstanding) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{63}
}

func (x *ResponseIDTrxOutstanding) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ExtendMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OuId          int64  `protobuf:"varint,1,opt,name=ouId,proto3" json:"ouId,omitempty"`
	RegisteredBy  string `protobuf:"bytes,2,opt,name=registeredBy,proto3" json:"registeredBy,omitempty"`
	TypePartner   string `protobuf:"bytes,3,opt,name=typePartner,proto3" json:"typePartner,omitempty"`
	DateFrom      string `protobuf:"bytes,4,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	DateTo        string `protobuf:"bytes,5,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	VehicleNumber string `protobuf:"bytes,6,opt,name=vehicleNumber,proto3" json:"vehicleNumber,omitempty"`
	CardNumber    string `protobuf:"bytes,7,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	ProductId     int64  `protobuf:"varint,8,opt,name=productId,proto3" json:"productId,omitempty"`
	Username      string `protobuf:"bytes,9,opt,name=username,proto3" json:"username,omitempty"`
	UpdatedAt     string `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedBy     string `protobuf:"bytes,11,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *ExtendMember) Reset() {
	*x = ExtendMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendMember) ProtoMessage() {}

func (x *ExtendMember) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendMember.ProtoReflect.Descriptor instead.
func (*ExtendMember) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{64}
}

func (x *ExtendMember) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *ExtendMember) GetRegisteredBy() string {
	if x != nil {
		return x.RegisteredBy
	}
	return ""
}

func (x *ExtendMember) GetTypePartner() string {
	if x != nil {
		return x.TypePartner
	}
	return ""
}

func (x *ExtendMember) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ExtendMember) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *ExtendMember) GetVehicleNumber() string {
	if x != nil {
		return x.VehicleNumber
	}
	return ""
}

func (x *ExtendMember) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *ExtendMember) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ExtendMember) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ExtendMember) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ExtendMember) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode       string                 `protobuf:"bytes,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Success          bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ResponseDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=responseDatetime,proto3" json:"responseDatetime,omitempty"`
	Result           *anypb.Any             `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Message          string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{65}
}

func (x *Response) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Response) GetResponseDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResponseDatetime
	}
	return nil
}

func (x *Response) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DurationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"` // represents duration value
}

func (x *DurationMessage) Reset() {
	*x = DurationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationMessage) ProtoMessage() {}

func (x *DurationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationMessage.ProtoReflect.Descriptor instead.
func (*DurationMessage) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{66}
}

func (x *DurationMessage) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ResponseTrxCloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode       string                 `protobuf:"bytes,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Success          bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ResponseDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=responseDatetime,proto3" json:"responseDatetime,omitempty"`
	Result           *Result                `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Message          string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResponseTrxCloud) Reset() {
	*x = ResponseTrxCloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTrxCloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTrxCloud) ProtoMessage() {}

func (x *ResponseTrxCloud) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTrxCloud.ProtoReflect.Descriptor instead.
func (*ResponseTrxCloud) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{67}
}

func (x *ResponseTrxCloud) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ResponseTrxCloud) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseTrxCloud) GetResponseDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResponseDatetime
	}
	return nil
}

func (x *ResponseTrxCloud) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ResponseTrxCloud) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trx            *Trx                      `protobuf:"bytes,1,opt,name=trx,proto3" json:"trx,omitempty"`
	TrxInvoiceItem *ResultFindTrxOutstanding `protobuf:"bytes,2,opt,name=trxInvoiceItem,proto3" json:"trxInvoiceItem,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{68}
}

func (x *Result) GetTrx() *Trx {
	if x != nil {
		return x.Trx
	}
	return nil
}

func (x *Result) GetTrxInvoiceItem() *ResultFindTrxOutstanding {
	if x != nil {
		return x.TrxInvoiceItem
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PartnerCode         string                  `protobuf:"bytes,2,opt,name=partnerCode,proto3" json:"partnerCode,omitempty"`
	FirstName           string                  `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName            string                  `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`
	RoleType            string                  `protobuf:"bytes,5,opt,name=roleType,proto3" json:"roleType,omitempty"`
	PhoneNumber         string                  `protobuf:"bytes,6,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	Email               string                  `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Active              string                  `protobuf:"bytes,8,opt,name=active,proto3" json:"active,omitempty"`
	ActiveAt            string                  `protobuf:"bytes,9,opt,name=activeAt,proto3" json:"activeAt,omitempty"`
	NonActiveAt         *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=nonActiveAt,proto3" json:"nonActiveAt,omitempty"` // Used string as equivalent of *string in Go for nullable string.
	OuId                int64                   `protobuf:"varint,11,opt,name=ouId,proto3" json:"ouId,omitempty"`
	TypePartner         string                  `protobuf:"bytes,12,opt,name=typePartner,proto3" json:"typePartner,omitempty"`
	CardNumber          string                  `protobuf:"bytes,13,opt,name=cardNumber,proto3" json:"cardNumber,omitempty"`
	VehicleNumber       string                  `protobuf:"bytes,14,opt,name=vehicleNumber,proto3" json:"vehicleNumber,omitempty"`
	RegisteredDatetime  string                  `protobuf:"bytes,15,opt,name=registeredDatetime,proto3" json:"registeredDatetime,omitempty"`
	DateFrom            string                  `protobuf:"bytes,16,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	DateTo              string                  `protobuf:"bytes,17,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	ProductId           int64                   `protobuf:"varint,18,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductCode         string                  `protobuf:"bytes,19,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ProductMembershipId int64                   `protobuf:"varint,20,opt,name=productMembershipId,proto3" json:"productMembershipId,omitempty"`
	Price               float64                 `protobuf:"fixed64,21,opt,name=price,proto3" json:"price,omitempty"` // Using double as equivalent of float64 in Go.
	ServiceFee          float64                 `protobuf:"fixed64,22,opt,name=serviceFee,proto3" json:"serviceFee,omitempty"`
	IsPctSfee           string                  `protobuf:"bytes,23,opt,name=isPctSfee,proto3" json:"isPctSfee,omitempty"`
	DueDate             int64                   `protobuf:"varint,24,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	DiscType            string                  `protobuf:"bytes,25,opt,name=discType,proto3" json:"discType,omitempty"`
	DiscAmount          float64                 `protobuf:"fixed64,26,opt,name=discAmount,proto3" json:"discAmount,omitempty"`
	DiscPct             int64                   `protobuf:"varint,27,opt,name=discPct,proto3" json:"discPct,omitempty"`
	GracePeriodDate     int64                   `protobuf:"varint,28,opt,name=gracePeriodDate,proto3" json:"gracePeriodDate,omitempty"`
	Username            string                  `protobuf:"bytes,29,opt,name=username,proto3" json:"username,omitempty"`
	IsExtendMember      bool                    `protobuf:"varint,30,opt,name=isExtendMember,proto3" json:"isExtendMember,omitempty"` // Using bool as equivalent of bool in Go.
	CreatedAt           string                  `protobuf:"bytes,31,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedBy           string                  `protobuf:"bytes,32,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedAt           string                  `protobuf:"bytes,33,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedBy           string                  `protobuf:"bytes,34,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{69}
}

func (x *Member) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Member) GetPartnerCode() string {
	if x != nil {
		return x.PartnerCode
	}
	return ""
}

func (x *Member) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Member) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Member) GetRoleType() string {
	if x != nil {
		return x.RoleType
	}
	return ""
}

func (x *Member) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Member) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Member) GetActive() string {
	if x != nil {
		return x.Active
	}
	return ""
}

func (x *Member) GetActiveAt() string {
	if x != nil {
		return x.ActiveAt
	}
	return ""
}

func (x *Member) GetNonActiveAt() *wrapperspb.StringValue {
	if x != nil {
		return x.NonActiveAt
	}
	return nil
}

func (x *Member) GetOuId() int64 {
	if x != nil {
		return x.OuId
	}
	return 0
}

func (x *Member) GetTypePartner() string {
	if x != nil {
		return x.TypePartner
	}
	return ""
}

func (x *Member) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *Member) GetVehicleNumber() string {
	if x != nil {
		return x.VehicleNumber
	}
	return ""
}

func (x *Member) GetRegisteredDatetime() string {
	if x != nil {
		return x.RegisteredDatetime
	}
	return ""
}

func (x *Member) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *Member) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *Member) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Member) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *Member) GetProductMembershipId() int64 {
	if x != nil {
		return x.ProductMembershipId
	}
	return 0
}

func (x *Member) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Member) GetServiceFee() float64 {
	if x != nil {
		return x.ServiceFee
	}
	return 0
}

func (x *Member) GetIsPctSfee() string {
	if x != nil {
		return x.IsPctSfee
	}
	return ""
}

func (x *Member) GetDueDate() int64 {
	if x != nil {
		return x.DueDate
	}
	return 0
}

func (x *Member) GetDiscType() string {
	if x != nil {
		return x.DiscType
	}
	return ""
}

func (x *Member) GetDiscAmount() float64 {
	if x != nil {
		return x.DiscAmount
	}
	return 0
}

func (x *Member) GetDiscPct() int64 {
	if x != nil {
		return x.DiscPct
	}
	return 0
}

func (x *Member) GetGracePeriodDate() int64 {
	if x != nil {
		return x.GracePeriodDate
	}
	return 0
}

func (x *Member) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Member) GetIsExtendMember() bool {
	if x != nil {
		return x.IsExtendMember
	}
	return false
}

func (x *Member) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Member) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Member) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Member) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type ResponseInquiryPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode       string                 `protobuf:"bytes,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Success          bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ResponseDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=responseDatetime,proto3" json:"responseDatetime,omitempty"` // Timestamp type might be better here, but requires an import.
	Result           *Results               `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Message          string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResponseInquiryPayment) Reset() {
	*x = ResponseInquiryPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseInquiryPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInquiryPayment) ProtoMessage() {}

func (x *ResponseInquiryPayment) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInquiryPayment.ProtoReflect.Descriptor instead.
func (*ResponseInquiryPayment) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{70}
}

func (x *ResponseInquiryPayment) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ResponseInquiryPayment) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseInquiryPayment) GetResponseDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResponseDatetime
	}
	return nil
}

func (x *ResponseInquiryPayment) GetResult() *Results {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ResponseInquiryPayment) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QrCode          string `protobuf:"bytes,1,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	Type            string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	PaymentRefDocNo string `protobuf:"bytes,3,opt,name=paymentRefDocNo,proto3" json:"paymentRefDocNo,omitempty"`
}

func (x *Results) Reset() {
	*x = Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trxLocal_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Results) ProtoMessage() {}

func (x *Results) ProtoReflect() protoreflect.Message {
	mi := &file_trxLocal_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Results.ProtoReflect.Descriptor instead.
func (*Results) Descriptor() ([]byte, []int) {
	return file_trxLocal_proto_rawDescGZIP(), []int{71}
}

func (x *Results) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *Results) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Results) GetPaymentRefDocNo() string {
	if x != nil {
		return x.PaymentRefDocNo
	}
	return ""
}

var File_trxLocal_proto protoreflect.FileDescriptor

var file_trxLocal_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x72, 0x78, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x74, 0x72, 0x78, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x37, 0x0a, 0x0a, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe5, 0x04, 0x0a, 0x09, 0x54,
	0x72, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x6f, 0x63, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x4e, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x4e, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x75, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x4f, 0x75, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x75, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x4f, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x75, 0x53, 0x75, 0x62, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4f,
	0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x4f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x75, 0x53, 0x75, 0x62, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x4f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x6b,
	0x65, 0x79, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x0a, 0x05, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x72, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x02, 0x0a, 0x11, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x72, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x22, 0xa2, 0x11, 0x0a, 0x03, 0x54, 0x72,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x44,
	0x6f, 0x63, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x44, 0x6f, 0x63, 0x6e, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x49,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x55, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x75, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75,
	0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f,
	0x75, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f,
	0x75, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x72, 0x41, 0x32, 0x50, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x72, 0x41, 0x32,
	0x50, 0x12, 0x30, 0x0a, 0x13, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72,
	0x78, 0x2e, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54,
	0x72, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x72, 0x78, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54,
	0x72, 0x78, 0x2e, 0x54, 0x72, 0x78, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x78, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x72, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x72,
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x52, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x78, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x72, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x67, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x67, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x61, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x54, 0x72,
	0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54,
	0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x54,
	0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x53, 0x0a, 0x0f, 0x54, 0x72, 0x78,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5,
	0x02, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x78, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x71, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x54, 0x72, 0x78, 0x44, 0x65, 0x70, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x22, 0xcc, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x71,
	0x75, 0x69, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x22, 0x8f, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x54,
	0x72, 0x78, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f,
	0x63, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x32, 0x34, 0x48, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x32, 0x34, 0x48, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x72, 0x78, 0x2e, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0xfc, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x71,
	0x75, 0x69, 0x72, 0x79, 0x54, 0x72, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x12, 0x30, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xb6, 0x04, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x54, 0x72, 0x78, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x32, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x66, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x54, 0x72, 0x78, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xb6, 0x05, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x79, 0x54, 0x72, 0x78, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x12, 0x30, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x34, 0x48, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x34, 0x48, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x04, 0x0a,
	0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54,
	0x72, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x22, 0x93, 0x04, 0x0a, 0x1f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x78,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66,
	0x22, 0x5b, 0x0a, 0x0b, 0x54, 0x72, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12,
	0x30, 0x0a, 0x0e, 0x74, 0x72, 0x78, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54, 0x72,
	0x78, 0x52, 0x0e, 0x74, 0x72, 0x78, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x03, 0x74, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54, 0x72, 0x78, 0x52, 0x03, 0x74, 0x72, 0x78, 0x22, 0x5c, 0x0a,
	0x0e, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x72, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xa6, 0x01, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x72, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f,
	0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0xde, 0x05, 0x0a, 0x0e, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x69, 0x73, 0x50, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x63, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x73, 0x50, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73,
	0x50, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x50, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x50, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x32, 0x34, 0x48,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x32, 0x34, 0x48, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x6c, 0x67, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x6c, 0x67, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x21,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x4b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x22, 0x55, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x46, 0x65, 0x65, 0x22, 0xf9, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63,
	0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x51, 0x52, 0x49, 0x53, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x49, 0x53, 0x41, 0x72, 0x65, 0x61, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x22, 0xf1, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x51, 0x52, 0x49, 0x53, 0x41, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x49, 0x53, 0x41, 0x72, 0x65, 0x61, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x22, 0xef, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x78, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x33,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x1d, 0x54, 0x72, 0x78, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x44, 0x6f, 0x63, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x44, 0x6f, 0x63, 0x4e, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x67, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x66, 0x6c, 0x61, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x16, 0x74, 0x72, 0x78, 0x4f, 0x75, 0x74,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54, 0x72, 0x78,
	0x52, 0x16, 0x74, 0x72, 0x78, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x79, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72, 0x78, 0x54, 0x6f, 0x43, 0x4c, 0x6f, 0x75,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22,
	0xa0, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f,
	0x63, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x10, 0x54, 0x72, 0x78,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x1c,
	0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x73, 0x50, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x72, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xca, 0x0a, 0x0a, 0x11, 0x54, 0x72, 0x78, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x6f, 0x63, 0x44, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f,
	0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x75, 0x53, 0x75,
	0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x53,
	0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75,
	0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69,
	0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69,
	0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x72, 0x78, 0x2e, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x4f, 0x75, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x72, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x26, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x72, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x49, 0x0a, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54, 0x72,
	0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x74, 0x72, 0x78, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xec, 0x01, 0x0a, 0x16, 0x54,
	0x72, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x63, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x63, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x78, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x19, 0x6c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x72, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xe2, 0x05, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x78, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x53,
	0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x53,
	0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x65, 0x0a, 0x1c, 0x74, 0x72, 0x78, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x72, 0x78, 0x2e, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x1c, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x24, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x54, 0x72, 0x78, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x72, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x23, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc8, 0x10, 0x0a, 0x09, 0x54, 0x72, 0x78, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f,
	0x63, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x4e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x4e, 0x6f,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x49, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x65, 0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x50, 0x63, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x73, 0x50, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x50, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x50, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6f, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x75, 0x53,
	0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75,
	0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f,
	0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x65, 0x0a, 0x1c, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x72, 0x78, 0x2e, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x1c, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a,
	0x1b, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x32, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x1b, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54, 0x72, 0x78, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x72, 0x78, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6c, 0x61,
	0x67, 0x54, 0x72, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x78, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x72, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x66, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x67, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x67, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6c, 0x67, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x66, 0x6c, 0x67, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x22, 0xa1, 0x05, 0x0a, 0x17, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x73, 0x50, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x63, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x63, 0x50, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63,
	0x50, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x51,
	0x72, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0x6b, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x51, 0x72, 0x69, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x44, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x44,
	0x6f, 0x63, 0x4e, 0x6f, 0x22, 0x8b, 0x05, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x6c, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x6c, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6c, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x71, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x22, 0x57, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x51,
	0x72, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xca, 0x05, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x41, 0x32, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x52, 0x65, 0x66, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72,
	0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x22, 0xe7, 0x04, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x78, 0x56,
	0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x49, 0x53, 0x41, 0x72, 0x65, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x49, 0x53,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x22, 0xcf, 0x0f, 0x0a, 0x09, 0x54, 0x72, 0x78, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x49, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x65, 0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x53, 0x75,
	0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x53, 0x75,
	0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x75, 0x53, 0x75, 0x62, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x72, 0x78, 0x2e, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x79, 0x6e,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x78, 0x2e,
	0x54, 0x72, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x72, 0x78, 0x41, 0x64, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x78, 0x2e,
	0x54, 0x72, 0x78, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x2e, 0x54, 0x72, 0x78, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x78, 0x41, 0x64,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x72, 0x78,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x72, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x72, 0x78, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x73, 0x79,
	0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x67, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6c, 0x61,
	0x67, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x71, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a,
	0x53, 0x0a, 0x0f, 0x54, 0x72, 0x78, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x44, 0x54, 0x72, 0x78, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xd8, 0x02, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6f, 0x75, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x78, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x6b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x03, 0x74,
	0x72, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x54,
	0x72, 0x78, 0x52, 0x03, 0x74, 0x72, 0x78, 0x12, 0x45, 0x0a, 0x0e, 0x74, 0x72, 0x78, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x54, 0x72, 0x78, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x74, 0x72, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xb8,
	0x08, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x3e, 0x0a,
	0x0b, 0x6e, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x75, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x75, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x63, 0x74, 0x53, 0x66,
	0x65, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x50, 0x63, 0x74, 0x53,
	0x66, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73,
	0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x63, 0x50, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63,
	0x50, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xda, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x46,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x44, 0x6f, 0x63, 0x4e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x44, 0x6f, 0x63, 0x4e, 0x6f, 0x32, 0x87, 0x09, 0x0a, 0x0a, 0x54, 0x72, 0x78, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x78,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x72, 0x78, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x1a, 0x0f, 0x2e, 0x74, 0x72,
	0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x15, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x54, 0x72, 0x78, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x12, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x79, 0x54, 0x72, 0x78, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1b, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x1a, 0x0f, 0x2e,
	0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x78, 0x12, 0x16,
	0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x54, 0x72, 0x78, 0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x78, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x2e,
	0x74, 0x72, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x78, 0x42, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x74, 0x72,
	0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72, 0x78,
	0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x0a, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0e, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x50, 0x33, 0x12, 0x1d, 0x2e, 0x74,
	0x72, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x50, 0x33, 0x1a, 0x0f, 0x2e, 0x74, 0x72,
	0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x10, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x33, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x33,
	0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x74, 0x72,
	0x78, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x54, 0x72, 0x78, 0x12, 0x0a, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x78, 0x4f, 0x75, 0x74,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x0a, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0f, 0x2e, 0x74, 0x72,
	0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x78, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x1a, 0x0f,
	0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2e, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4d, 0x4b, 0x65, 0x79,
	0x12, 0x0c, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x1a, 0x0f,
	0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x33, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x54, 0x72, 0x78, 0x12, 0x0a, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x1a, 0x0f, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x54, 0x72, 0x78, 0x50, 0x33, 0x12, 0x16, 0x2e, 0x74, 0x72, 0x78, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x78, 0x1a, 0x0f,
	0x2e, 0x74, 0x72, 0x78, 0x2e, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x3b, 0x74, 0x72, 0x78, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trxLocal_proto_rawDescOnce sync.Once
	file_trxLocal_proto_rawDescData = file_trxLocal_proto_rawDesc
)

func file_trxLocal_proto_rawDescGZIP() []byte {
	file_trxLocal_proto_rawDescOnce.Do(func() {
		file_trxLocal_proto_rawDescData = protoimpl.X.CompressGZIP(file_trxLocal_proto_rawDescData)
	})
	return file_trxLocal_proto_rawDescData
}

var file_trxLocal_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_trxLocal_proto_goTypes = []interface{}{
	(*MyResponse)(nil),                             // 0: trx.MyResponse
	(*TrxMember)(nil),                              // 1: trx.TrxMember
	(*MerchantKey)(nil),                            // 2: trx.MerchantKey
	(*ResMerchantKey)(nil),                         // 3: trx.ResMerchantKey
	(*Empty)(nil),                                  // 4: trx.Empty
	(*Param)(nil),                                  // 5: trx.Param
	(*ResponseMap)(nil),                            // 6: trx.ResponseMap
	(*RequestTrxCheckin)(nil),                      // 7: trx.RequestTrxCheckin
	(*ResponseErr)(nil),                            // 8: trx.ResponseErr
	(*RequestTrxCheckInWithoutCard)(nil),           // 9: trx.RequestTrxCheckInWithoutCard
	(*Trx)(nil),                                    // 10: trx.Trx
	(*ResponseTrxTicket)(nil),                      // 11: trx.ResponseTrxTicket
	(*RequestInquiryWithoutCard)(nil),              // 12: trx.RequestInquiryWithoutCard
	(*RequestCustomInquiryWithoutCard)(nil),        // 13: trx.RequestCustomInquiryWithoutCard
	(*RequestInquiryTrxDepoWithoutCard)(nil),       // 14: trx.RequestInquiryTrxDepoWithoutCard
	(*RequestInquiryWithCard)(nil),                 // 15: trx.RequestInquiryWithCard
	(*RequestInquiryWithCardP3)(nil),               // 16: trx.RequestInquiryWithCardP3
	(*RequestInquiryWithCardCustom)(nil),           // 17: trx.RequestInquiryWithCardCustom
	(*ResultFindTrxOutstanding)(nil),               // 18: trx.ResultFindTrxOutstanding
	(*ResultInquiryTrx)(nil),                       // 19: trx.ResultInquiryTrx
	(*ResultInquiryTrxCustomV2)(nil),               // 20: trx.ResultInquiryTrxCustomV2
	(*ResultInquiryTrxCustom)(nil),                 // 21: trx.ResultInquiryTrxCustom
	(*ResultInquiryTrxWithCard)(nil),               // 22: trx.ResultInquiryTrxWithCard
	(*RequestConfirmTrx)(nil),                      // 23: trx.RequestConfirmTrx
	(*RequestConfirmTrxDepositCounter)(nil),        // 24: trx.RequestConfirmTrxDepositCounter
	(*TrxCheckOut)(nil),                            // 25: trx.TrxCheckOut
	(*LogActivityTrx)(nil),                         // 26: trx.LogActivityTrx
	(*InvoiceTrx)(nil),                             // 27: trx.InvoiceTrx
	(*TrxInvoiceItem)(nil),                         // 28: trx.TrxInvoiceItem
	(*TrxInvoiceDetailItem)(nil),                   // 29: trx.TrxInvoiceDetailItem
	(*ResponseTrxInvoiceDetailsItemList)(nil),      // 30: trx.ResponseTrxInvoiceDetailsItemList
	(*RequestInquiryRedis)(nil),                    // 31: trx.RequestInquiryRedis
	(*InvoiceFeeDetailParking)(nil),                // 32: trx.InvoiceFeeDetailParking
	(*ResponseConfirm)(nil),                        // 33: trx.ResponseConfirm
	(*ResponseConfirmTrxDeposit)(nil),              // 34: trx.ResponseConfirmTrxDeposit
	(*ConfirmTrxByPassMessage)(nil),                // 35: trx.ConfirmTrxByPassMessage
	(*RequestInquiryPayment)(nil),                  // 36: trx.RequestInquiryPayment
	(*RequestInquiryPaymentP3)(nil),                // 37: trx.RequestInquiryPaymentP3
	(*TrxOutstandingForClearSession)(nil),          // 38: trx.TrxOutstandingForClearSession
	(*RequestSyncTrxToCLoud)(nil),                  // 39: trx.RequestSyncTrxToCLoud
	(*RequestUpdateProductPrice)(nil),              // 40: trx.RequestUpdateProductPrice
	(*UpdateProductCloud)(nil),                     // 41: trx.UpdateProductCloud
	(*RequestRegistrationMemberLocal)(nil),         // 42: trx.RequestRegistrationMemberLocal
	(*TrxProductCustom)(nil),                       // 43: trx.TrxProductCustom
	(*TrxInvoiceDepositCounterItem)(nil),           // 44: trx.TrxInvoiceDepositCounterItem
	(*RequestTrxDepositCounter)(nil),               // 45: trx.RequestTrxDepositCounter
	(*TrxDepositCounter)(nil),                      // 46: trx.TrxDepositCounter
	(*ResponseTrxDepositCounter)(nil),              // 47: trx.ResponseTrxDepositCounter
	(*ResultFindTrxDepositCounterOutstanding)(nil), // 48: trx.ResultFindTrxDepositCounterOutstanding
	(*TrxItemsDepositCounter)(nil),                 // 49: trx.TrxItemsDepositCounter
	(*ResponseFindTrxDepositCounter)(nil),          // 50: trx.ResponseFindTrxDepositCounter
	(*FindTrxDepositCounter)(nil),                  // 51: trx.FindTrxDepositCounter
	(*ResultInquiryTrxCustomDepositCounter)(nil),   // 52: trx.ResultInquiryTrxCustomDepositCounter
	(*Decrypt)(nil),                                // 53: trx.Decrypt
	(*TrxCustom)(nil),                              // 54: trx.TrxCustom
	(*TrxInvoiceMemberDeposit)(nil),                // 55: trx.TrxInvoiceMemberDeposit
	(*RequestInquiryPaymentQris)(nil),              // 56: trx.RequestInquiryPaymentQris
	(*ResponseInquiryQris)(nil),                    // 57: trx.ResponseInquiryQris
	(*ResponseConfirmLostTicket)(nil),              // 58: trx.ResponseConfirmLostTicket
	(*RequestCheckStatusPaymentQris)(nil),          // 59: trx.RequestCheckStatusPaymentQris
	(*ResponseCheckStatusA2P)(nil),                 // 60: trx.ResponseCheckStatusA2P
	(*ResponseConfirmTrxVip)(nil),                  // 61: trx.ResponseConfirmTrxVip
	(*TrxWithId)(nil),                              // 62: trx.TrxWithId
	(*ResponseIDTrxOutstanding)(nil),               // 63: trx.ResponseIDTrxOutstanding
	(*ExtendMember)(nil),                           // 64: trx.ExtendMember
	(*Response)(nil),                               // 65: trx.Response
	(*DurationMessage)(nil),                        // 66: trx.DurationMessage
	(*ResponseTrxCloud)(nil),                       // 67: trx.ResponseTrxCloud
	(*Result)(nil),                                 // 68: trx.Result
	(*Member)(nil),                                 // 69: trx.Member
	(*ResponseInquiryPayment)(nil),                 // 70: trx.ResponseInquiryPayment
	(*Results)(nil),                                // 71: trx.Results
	nil,                                            // 72: trx.ResponseMap.ResponseEntry
	nil,                                            // 73: trx.Trx.TrxAddInfoEntry
	nil,                                            // 74: trx.TrxWithId.TrxAddInfoEntry
	(*wrapperspb.StringValue)(nil),                 // 75: google.protobuf.StringValue
	(*anypb.Any)(nil),                              // 76: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),                  // 77: google.protobuf.Timestamp
}
var file_trxLocal_proto_depIdxs = []int32{
	65, // 0: trx.MyResponse.response:type_name -> trx.Response
	75, // 1: trx.TrxMember.NonActiveAt:type_name -> google.protobuf.StringValue
	2,  // 2: trx.ResMerchantKey.merchantkey:type_name -> trx.MerchantKey
	72, // 3: trx.ResponseMap.response:type_name -> trx.ResponseMap.ResponseEntry
	28, // 4: trx.Trx.trxInvoiceItem:type_name -> trx.TrxInvoiceItem
	1,  // 5: trx.Trx.memberData:type_name -> trx.TrxMember
	73, // 6: trx.Trx.trxAddInfo:type_name -> trx.Trx.TrxAddInfoEntry
	29, // 7: trx.Trx.requestAddTrxInvoiceDetailItem:type_name -> trx.TrxInvoiceDetailItem
	28, // 8: trx.ResultFindTrxOutstanding.trxInvoiceItem:type_name -> trx.TrxInvoiceItem
	76, // 9: trx.ResultInquiryTrx.duration:type_name -> google.protobuf.Any
	76, // 10: trx.ResultInquiryTrx.invoiceDetail:type_name -> google.protobuf.Any
	76, // 11: trx.ResultInquiryTrxCustomV2.duration:type_name -> google.protobuf.Any
	76, // 12: trx.ResultInquiryTrxCustomV2.invoiceDetail:type_name -> google.protobuf.Any
	76, // 13: trx.ResultInquiryTrxCustom.duration:type_name -> google.protobuf.Any
	76, // 14: trx.ResultInquiryTrxWithCard.duration:type_name -> google.protobuf.Any
	76, // 15: trx.ResultInquiryTrxWithCard.duration24H:type_name -> google.protobuf.Any
	76, // 16: trx.ResultInquiryTrxWithCard.invoiceDetail:type_name -> google.protobuf.Any
	10, // 17: trx.TrxCheckOut.trxOutStanding:type_name -> trx.Trx
	10, // 18: trx.TrxCheckOut.trx:type_name -> trx.Trx
	76, // 19: trx.ResponseConfirm.invoiceDetail:type_name -> google.protobuf.Any
	10, // 20: trx.TrxOutstandingForClearSession.trxOutstandingSnapshot:type_name -> trx.Trx
	44, // 21: trx.TrxDepositCounter.trxInvoiceItem:type_name -> trx.TrxInvoiceDepositCounterItem
	44, // 22: trx.ResultFindTrxDepositCounterOutstanding.trxInvoiceItem:type_name -> trx.TrxInvoiceDepositCounterItem
	51, // 23: trx.ResponseFindTrxDepositCounter.listTrxDepositCounterData:type_name -> trx.FindTrxDepositCounter
	44, // 24: trx.FindTrxDepositCounter.trxInvoiceItemDepositCounter:type_name -> trx.TrxInvoiceDepositCounterItem
	44, // 25: trx.TrxCustom.trxInvoiceItemDepositCounter:type_name -> trx.TrxInvoiceDepositCounterItem
	55, // 26: trx.TrxCustom.trxInvoiceItemMemberDeposit:type_name -> trx.TrxInvoiceMemberDeposit
	1,  // 27: trx.TrxCustom.memberData:type_name -> trx.TrxMember
	28, // 28: trx.TrxWithId.trxInvoiceItem:type_name -> trx.TrxInvoiceItem
	1,  // 29: trx.TrxWithId.memberData:type_name -> trx.TrxMember
	74, // 30: trx.TrxWithId.trxAddInfo:type_name -> trx.TrxWithId.TrxAddInfoEntry
	77, // 31: trx.Response.responseDatetime:type_name -> google.protobuf.Timestamp
	76, // 32: trx.Response.result:type_name -> google.protobuf.Any
	77, // 33: trx.ResponseTrxCloud.responseDatetime:type_name -> google.protobuf.Timestamp
	68, // 34: trx.ResponseTrxCloud.result:type_name -> trx.Result
	10, // 35: trx.Result.trx:type_name -> trx.Trx
	18, // 36: trx.Result.trxInvoiceItem:type_name -> trx.ResultFindTrxOutstanding
	75, // 37: trx.Member.nonActiveAt:type_name -> google.protobuf.StringValue
	77, // 38: trx.ResponseInquiryPayment.responseDatetime:type_name -> google.protobuf.Timestamp
	71, // 39: trx.ResponseInquiryPayment.result:type_name -> trx.Results
	76, // 40: trx.ResponseMap.ResponseEntry.value:type_name -> google.protobuf.Any
	76, // 41: trx.Trx.TrxAddInfoEntry.value:type_name -> google.protobuf.Any
	76, // 42: trx.TrxWithId.TrxAddInfoEntry.value:type_name -> google.protobuf.Any
	7,  // 43: trx.TrxService.AddTrxWithCard:input_type -> trx.RequestTrxCheckin
	9,  // 44: trx.TrxService.AddTrxWithoutCard:input_type -> trx.RequestTrxCheckInWithoutCard
	12, // 45: trx.TrxService.InquiryTrxWithoutCard:input_type -> trx.RequestInquiryWithoutCard
	15, // 46: trx.TrxService.InquiryTrxWithCard:input_type -> trx.RequestInquiryWithCard
	23, // 47: trx.TrxService.ConfirmTrx:input_type -> trx.RequestConfirmTrx
	35, // 48: trx.TrxService.ConfirmTrxByPass:input_type -> trx.ConfirmTrxByPassMessage
	4,  // 49: trx.TrxService.ConfirmSyncTrxToCloud:input_type -> trx.Empty
	36, // 50: trx.TrxService.InquiryPayment:input_type -> trx.RequestInquiryPayment
	16, // 51: trx.TrxService.InquiryWithCardP3:input_type -> trx.RequestInquiryWithCardP3
	37, // 52: trx.TrxService.InquiryPaymentP3:input_type -> trx.RequestInquiryPaymentP3
	5,  // 53: trx.TrxService.GetTrxListForDocDate:input_type -> trx.Param
	5,  // 54: trx.TrxService.UpdateStatusManualTrx:input_type -> trx.Param
	5,  // 55: trx.TrxService.FindTrxOutstandingByIndex:input_type -> trx.Param
	40, // 56: trx.TrxService.UpdateProductPrice:input_type -> trx.RequestUpdateProductPrice
	42, // 57: trx.TrxService.RegisterMember:input_type -> trx.RequestRegistrationMemberLocal
	53, // 58: trx.TrxService.DecryptMKey:input_type -> trx.Decrypt
	5,  // 59: trx.TrxService.UpdateAutoClearTrx:input_type -> trx.Param
	23, // 60: trx.TrxService.ConfirmTrxP3:input_type -> trx.RequestConfirmTrx
	0,  // 61: trx.TrxService.AddTrxWithCard:output_type -> trx.MyResponse
	0,  // 62: trx.TrxService.AddTrxWithoutCard:output_type -> trx.MyResponse
	0,  // 63: trx.TrxService.InquiryTrxWithoutCard:output_type -> trx.MyResponse
	0,  // 64: trx.TrxService.InquiryTrxWithCard:output_type -> trx.MyResponse
	0,  // 65: trx.TrxService.ConfirmTrx:output_type -> trx.MyResponse
	0,  // 66: trx.TrxService.ConfirmTrxByPass:output_type -> trx.MyResponse
	0,  // 67: trx.TrxService.ConfirmSyncTrxToCloud:output_type -> trx.MyResponse
	0,  // 68: trx.TrxService.InquiryPayment:output_type -> trx.MyResponse
	0,  // 69: trx.TrxService.InquiryWithCardP3:output_type -> trx.MyResponse
	0,  // 70: trx.TrxService.InquiryPaymentP3:output_type -> trx.MyResponse
	0,  // 71: trx.TrxService.GetTrxListForDocDate:output_type -> trx.MyResponse
	0,  // 72: trx.TrxService.UpdateStatusManualTrx:output_type -> trx.MyResponse
	0,  // 73: trx.TrxService.FindTrxOutstandingByIndex:output_type -> trx.MyResponse
	0,  // 74: trx.TrxService.UpdateProductPrice:output_type -> trx.MyResponse
	0,  // 75: trx.TrxService.RegisterMember:output_type -> trx.MyResponse
	0,  // 76: trx.TrxService.DecryptMKey:output_type -> trx.MyResponse
	0,  // 77: trx.TrxService.UpdateAutoClearTrx:output_type -> trx.MyResponse
	0,  // 78: trx.TrxService.ConfirmTrxP3:output_type -> trx.MyResponse
	61, // [61:79] is the sub-list for method output_type
	43, // [43:61] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_trxLocal_proto_init() }
func file_trxLocal_proto_init() {
	if File_trxLocal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trxLocal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMerchantKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTrxCheckin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTrxCheckInWithoutCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTrxTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInquiryWithoutCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCustomInquiryWithoutCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInquiryTrxDepoWithoutCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInquiryWithCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInquiryWithCardP3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInquiryWithCardCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultFindTrxOutstanding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultInquiryTrx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultInquiryTrxCustomV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultInquiryTrxCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultInquiryTrxWithCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestConfirmTrx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestConfirmTrxDepositCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxCheckOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogActivityTrx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceTrx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxInvoiceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxInvoiceDetailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTrxInvoiceDetailsItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInquiryRedis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceFeeDetailParking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseConfirmTrxDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmTrxByPassMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInquiryPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInquiryPaymentP3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxOutstandingForClearSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSyncTrxToCLoud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUpdateProductPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductCloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRegistrationMemberLocal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxProductCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxInvoiceDepositCounterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTrxDepositCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxDepositCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTrxDepositCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultFindTrxDepositCounterOutstanding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxItemsDepositCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFindTrxDepositCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTrxDepositCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultInquiryTrxCustomDepositCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxInvoiceMemberDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInquiryPaymentQris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseInquiryQris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseConfirmLostTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCheckStatusPaymentQris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCheckStatusA2P); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseConfirmTrxVip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxWithId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseIDTrxOutstanding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTrxCloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseInquiryPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trxLocal_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trxLocal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trxLocal_proto_goTypes,
		DependencyIndexes: file_trxLocal_proto_depIdxs,
		MessageInfos:      file_trxLocal_proto_msgTypes,
	}.Build()
	File_trxLocal_proto = out.File
	file_trxLocal_proto_rawDesc = nil
	file_trxLocal_proto_goTypes = nil
	file_trxLocal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TrxServiceClient is the client API for TrxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrxServiceClient interface {
	AddTrxWithCard(ctx context.Context, in *RequestTrxCheckin, opts ...grpc.CallOption) (*MyResponse, error)
	AddTrxWithoutCard(ctx context.Context, in *RequestTrxCheckInWithoutCard, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryTrxWithoutCard(ctx context.Context, in *RequestInquiryWithoutCard, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryTrxWithCard(ctx context.Context, in *RequestInquiryWithCard, opts ...grpc.CallOption) (*MyResponse, error)
	ConfirmTrx(ctx context.Context, in *RequestConfirmTrx, opts ...grpc.CallOption) (*MyResponse, error)
	ConfirmTrxByPass(ctx context.Context, in *ConfirmTrxByPassMessage, opts ...grpc.CallOption) (*MyResponse, error)
	ConfirmSyncTrxToCloud(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryPayment(ctx context.Context, in *RequestInquiryPayment, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryWithCardP3(ctx context.Context, in *RequestInquiryWithCardP3, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryPaymentP3(ctx context.Context, in *RequestInquiryPaymentP3, opts ...grpc.CallOption) (*MyResponse, error)
	GetTrxListForDocDate(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error)
	UpdateStatusManualTrx(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error)
	FindTrxOutstandingByIndex(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error)
	UpdateProductPrice(ctx context.Context, in *RequestUpdateProductPrice, opts ...grpc.CallOption) (*MyResponse, error)
	RegisterMember(ctx context.Context, in *RequestRegistrationMemberLocal, opts ...grpc.CallOption) (*MyResponse, error)
	DecryptMKey(ctx context.Context, in *Decrypt, opts ...grpc.CallOption) (*MyResponse, error)
	UpdateAutoClearTrx(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error)
	ConfirmTrxP3(ctx context.Context, in *RequestConfirmTrx, opts ...grpc.CallOption) (*MyResponse, error)
}

type trxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrxServiceClient(cc grpc.ClientConnInterface) TrxServiceClient {
	return &trxServiceClient{cc}
}

func (c *trxServiceClient) AddTrxWithCard(ctx context.Context, in *RequestTrxCheckin, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/AddTrxWithCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) AddTrxWithoutCard(ctx context.Context, in *RequestTrxCheckInWithoutCard, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/AddTrxWithoutCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryTrxWithoutCard(ctx context.Context, in *RequestInquiryWithoutCard, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/InquiryTrxWithoutCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryTrxWithCard(ctx context.Context, in *RequestInquiryWithCard, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/InquiryTrxWithCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) ConfirmTrx(ctx context.Context, in *RequestConfirmTrx, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/ConfirmTrx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) ConfirmTrxByPass(ctx context.Context, in *ConfirmTrxByPassMessage, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/ConfirmTrxByPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) ConfirmSyncTrxToCloud(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/ConfirmSyncTrxToCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryPayment(ctx context.Context, in *RequestInquiryPayment, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/InquiryPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryWithCardP3(ctx context.Context, in *RequestInquiryWithCardP3, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/InquiryWithCardP3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryPaymentP3(ctx context.Context, in *RequestInquiryPaymentP3, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/InquiryPaymentP3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) GetTrxListForDocDate(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/GetTrxListForDocDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) UpdateStatusManualTrx(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/UpdateStatusManualTrx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) FindTrxOutstandingByIndex(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/FindTrxOutstandingByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) UpdateProductPrice(ctx context.Context, in *RequestUpdateProductPrice, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/UpdateProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) RegisterMember(ctx context.Context, in *RequestRegistrationMemberLocal, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/RegisterMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) DecryptMKey(ctx context.Context, in *Decrypt, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/DecryptMKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) UpdateAutoClearTrx(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/UpdateAutoClearTrx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) ConfirmTrxP3(ctx context.Context, in *RequestConfirmTrx, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/trx.TrxService/ConfirmTrxP3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrxServiceServer is the server API for TrxService service.
type TrxServiceServer interface {
	AddTrxWithCard(context.Context, *RequestTrxCheckin) (*MyResponse, error)
	AddTrxWithoutCard(context.Context, *RequestTrxCheckInWithoutCard) (*MyResponse, error)
	InquiryTrxWithoutCard(context.Context, *RequestInquiryWithoutCard) (*MyResponse, error)
	InquiryTrxWithCard(context.Context, *RequestInquiryWithCard) (*MyResponse, error)
	ConfirmTrx(context.Context, *RequestConfirmTrx) (*MyResponse, error)
	ConfirmTrxByPass(context.Context, *ConfirmTrxByPassMessage) (*MyResponse, error)
	ConfirmSyncTrxToCloud(context.Context, *Empty) (*MyResponse, error)
	InquiryPayment(context.Context, *RequestInquiryPayment) (*MyResponse, error)
	InquiryWithCardP3(context.Context, *RequestInquiryWithCardP3) (*MyResponse, error)
	InquiryPaymentP3(context.Context, *RequestInquiryPaymentP3) (*MyResponse, error)
	GetTrxListForDocDate(context.Context, *Param) (*MyResponse, error)
	UpdateStatusManualTrx(context.Context, *Param) (*MyResponse, error)
	FindTrxOutstandingByIndex(context.Context, *Param) (*MyResponse, error)
	UpdateProductPrice(context.Context, *RequestUpdateProductPrice) (*MyResponse, error)
	RegisterMember(context.Context, *RequestRegistrationMemberLocal) (*MyResponse, error)
	DecryptMKey(context.Context, *Decrypt) (*MyResponse, error)
	UpdateAutoClearTrx(context.Context, *Param) (*MyResponse, error)
	ConfirmTrxP3(context.Context, *RequestConfirmTrx) (*MyResponse, error)
}

// UnimplementedTrxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTrxServiceServer struct {
}

func (*UnimplementedTrxServiceServer) AddTrxWithCard(context.Context, *RequestTrxCheckin) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrxWithCard not implemented")
}
func (*UnimplementedTrxServiceServer) AddTrxWithoutCard(context.Context, *RequestTrxCheckInWithoutCard) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrxWithoutCard not implemented")
}
func (*UnimplementedTrxServiceServer) InquiryTrxWithoutCard(context.Context, *RequestInquiryWithoutCard) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryTrxWithoutCard not implemented")
}
func (*UnimplementedTrxServiceServer) InquiryTrxWithCard(context.Context, *RequestInquiryWithCard) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryTrxWithCard not implemented")
}
func (*UnimplementedTrxServiceServer) ConfirmTrx(context.Context, *RequestConfirmTrx) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTrx not implemented")
}
func (*UnimplementedTrxServiceServer) ConfirmTrxByPass(context.Context, *ConfirmTrxByPassMessage) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTrxByPass not implemented")
}
func (*UnimplementedTrxServiceServer) ConfirmSyncTrxToCloud(context.Context, *Empty) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmSyncTrxToCloud not implemented")
}
func (*UnimplementedTrxServiceServer) InquiryPayment(context.Context, *RequestInquiryPayment) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryPayment not implemented")
}
func (*UnimplementedTrxServiceServer) InquiryWithCardP3(context.Context, *RequestInquiryWithCardP3) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryWithCardP3 not implemented")
}
func (*UnimplementedTrxServiceServer) InquiryPaymentP3(context.Context, *RequestInquiryPaymentP3) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryPaymentP3 not implemented")
}
func (*UnimplementedTrxServiceServer) GetTrxListForDocDate(context.Context, *Param) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrxListForDocDate not implemented")
}
func (*UnimplementedTrxServiceServer) UpdateStatusManualTrx(context.Context, *Param) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusManualTrx not implemented")
}
func (*UnimplementedTrxServiceServer) FindTrxOutstandingByIndex(context.Context, *Param) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTrxOutstandingByIndex not implemented")
}
func (*UnimplementedTrxServiceServer) UpdateProductPrice(context.Context, *RequestUpdateProductPrice) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductPrice not implemented")
}
func (*UnimplementedTrxServiceServer) RegisterMember(context.Context, *RequestRegistrationMemberLocal) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMember not implemented")
}
func (*UnimplementedTrxServiceServer) DecryptMKey(context.Context, *Decrypt) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptMKey not implemented")
}
func (*UnimplementedTrxServiceServer) UpdateAutoClearTrx(context.Context, *Param) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoClearTrx not implemented")
}
func (*UnimplementedTrxServiceServer) ConfirmTrxP3(context.Context, *RequestConfirmTrx) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTrxP3 not implemented")
}

func RegisterTrxServiceServer(s *grpc.Server, srv TrxServiceServer) {
	s.RegisterService(&_TrxService_serviceDesc, srv)
}

func _TrxService_AddTrxWithCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTrxCheckin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).AddTrxWithCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/AddTrxWithCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).AddTrxWithCard(ctx, req.(*RequestTrxCheckin))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_AddTrxWithoutCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTrxCheckInWithoutCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).AddTrxWithoutCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/AddTrxWithoutCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).AddTrxWithoutCard(ctx, req.(*RequestTrxCheckInWithoutCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryTrxWithoutCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryWithoutCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryTrxWithoutCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/InquiryTrxWithoutCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryTrxWithoutCard(ctx, req.(*RequestInquiryWithoutCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryTrxWithCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryWithCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryTrxWithCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/InquiryTrxWithCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryTrxWithCard(ctx, req.(*RequestInquiryWithCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_ConfirmTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestConfirmTrx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).ConfirmTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/ConfirmTrx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).ConfirmTrx(ctx, req.(*RequestConfirmTrx))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_ConfirmTrxByPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTrxByPassMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).ConfirmTrxByPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/ConfirmTrxByPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).ConfirmTrxByPass(ctx, req.(*ConfirmTrxByPassMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_ConfirmSyncTrxToCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).ConfirmSyncTrxToCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/ConfirmSyncTrxToCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).ConfirmSyncTrxToCloud(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/InquiryPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryPayment(ctx, req.(*RequestInquiryPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryWithCardP3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryWithCardP3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryWithCardP3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/InquiryWithCardP3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryWithCardP3(ctx, req.(*RequestInquiryWithCardP3))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryPaymentP3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryPaymentP3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryPaymentP3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/InquiryPaymentP3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryPaymentP3(ctx, req.(*RequestInquiryPaymentP3))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_GetTrxListForDocDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).GetTrxListForDocDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/GetTrxListForDocDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).GetTrxListForDocDate(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_UpdateStatusManualTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).UpdateStatusManualTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/UpdateStatusManualTrx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).UpdateStatusManualTrx(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_FindTrxOutstandingByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).FindTrxOutstandingByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/FindTrxOutstandingByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).FindTrxOutstandingByIndex(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_UpdateProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateProductPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).UpdateProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/UpdateProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).UpdateProductPrice(ctx, req.(*RequestUpdateProductPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_RegisterMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegistrationMemberLocal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).RegisterMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/RegisterMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).RegisterMember(ctx, req.(*RequestRegistrationMemberLocal))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_DecryptMKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Decrypt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).DecryptMKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/DecryptMKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).DecryptMKey(ctx, req.(*Decrypt))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_UpdateAutoClearTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).UpdateAutoClearTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/UpdateAutoClearTrx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).UpdateAutoClearTrx(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_ConfirmTrxP3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestConfirmTrx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).ConfirmTrxP3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trx.TrxService/ConfirmTrxP3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).ConfirmTrxP3(ctx, req.(*RequestConfirmTrx))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trx.TrxService",
	HandlerType: (*TrxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTrxWithCard",
			Handler:    _TrxService_AddTrxWithCard_Handler,
		},
		{
			MethodName: "AddTrxWithoutCard",
			Handler:    _TrxService_AddTrxWithoutCard_Handler,
		},
		{
			MethodName: "InquiryTrxWithoutCard",
			Handler:    _TrxService_InquiryTrxWithoutCard_Handler,
		},
		{
			MethodName: "InquiryTrxWithCard",
			Handler:    _TrxService_InquiryTrxWithCard_Handler,
		},
		{
			MethodName: "ConfirmTrx",
			Handler:    _TrxService_ConfirmTrx_Handler,
		},
		{
			MethodName: "ConfirmTrxByPass",
			Handler:    _TrxService_ConfirmTrxByPass_Handler,
		},
		{
			MethodName: "ConfirmSyncTrxToCloud",
			Handler:    _TrxService_ConfirmSyncTrxToCloud_Handler,
		},
		{
			MethodName: "InquiryPayment",
			Handler:    _TrxService_InquiryPayment_Handler,
		},
		{
			MethodName: "InquiryWithCardP3",
			Handler:    _TrxService_InquiryWithCardP3_Handler,
		},
		{
			MethodName: "InquiryPaymentP3",
			Handler:    _TrxService_InquiryPaymentP3_Handler,
		},
		{
			MethodName: "GetTrxListForDocDate",
			Handler:    _TrxService_GetTrxListForDocDate_Handler,
		},
		{
			MethodName: "UpdateStatusManualTrx",
			Handler:    _TrxService_UpdateStatusManualTrx_Handler,
		},
		{
			MethodName: "FindTrxOutstandingByIndex",
			Handler:    _TrxService_FindTrxOutstandingByIndex_Handler,
		},
		{
			MethodName: "UpdateProductPrice",
			Handler:    _TrxService_UpdateProductPrice_Handler,
		},
		{
			MethodName: "RegisterMember",
			Handler:    _TrxService_RegisterMember_Handler,
		},
		{
			MethodName: "DecryptMKey",
			Handler:    _TrxService_DecryptMKey_Handler,
		},
		{
			MethodName: "UpdateAutoClearTrx",
			Handler:    _TrxService_UpdateAutoClearTrx_Handler,
		},
		{
			MethodName: "ConfirmTrxP3",
			Handler:    _TrxService_ConfirmTrxP3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trxLocal.proto",
}
