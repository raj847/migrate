// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: trx.proto

package trx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrxService_AddTrxWithCard_FullMethodName            = "/trx.TrxService/AddTrxWithCard"
	TrxService_AddTrxWithoutCard_FullMethodName         = "/trx.TrxService/AddTrxWithoutCard"
	TrxService_InquiryTrxWithoutCard_FullMethodName     = "/trx.TrxService/InquiryTrxWithoutCard"
	TrxService_InquiryTrxWithCard_FullMethodName        = "/trx.TrxService/InquiryTrxWithCard"
	TrxService_ConfirmTrx_FullMethodName                = "/trx.TrxService/ConfirmTrx"
	TrxService_ConfirmTrxByPass_FullMethodName          = "/trx.TrxService/ConfirmTrxByPass"
	TrxService_ConfirmSyncTrxToCloud_FullMethodName     = "/trx.TrxService/ConfirmSyncTrxToCloud"
	TrxService_InquiryPayment_FullMethodName            = "/trx.TrxService/InquiryPayment"
	TrxService_InquiryWithCardP3_FullMethodName         = "/trx.TrxService/InquiryWithCardP3"
	TrxService_InquiryPaymentP3_FullMethodName          = "/trx.TrxService/InquiryPaymentP3"
	TrxService_GetTrxListForDocDate_FullMethodName      = "/trx.TrxService/GetTrxListForDocDate"
	TrxService_UpdateStatusManualTrx_FullMethodName     = "/trx.TrxService/UpdateStatusManualTrx"
	TrxService_FindTrxOutstandingByIndex_FullMethodName = "/trx.TrxService/FindTrxOutstandingByIndex"
	TrxService_UpdateProductPrice_FullMethodName        = "/trx.TrxService/UpdateProductPrice"
	TrxService_RegisterMember_FullMethodName            = "/trx.TrxService/RegisterMember"
	TrxService_DecryptMKey_FullMethodName               = "/trx.TrxService/DecryptMKey"
	TrxService_UpdateAutoClearTrx_FullMethodName        = "/trx.TrxService/UpdateAutoClearTrx"
	TrxService_ConfirmTrxP3_FullMethodName              = "/trx.TrxService/ConfirmTrxP3"
)

// TrxServiceClient is the client API for TrxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrxServiceClient interface {
	AddTrxWithCard(ctx context.Context, in *RequestTrxCheckin, opts ...grpc.CallOption) (*MyResponse, error)
	AddTrxWithoutCard(ctx context.Context, in *RequestTrxCheckInWithoutCard, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryTrxWithoutCard(ctx context.Context, in *RequestInquiryWithoutCard, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryTrxWithCard(ctx context.Context, in *RequestInquiryWithCard, opts ...grpc.CallOption) (*MyResponse, error)
	ConfirmTrx(ctx context.Context, in *RequestConfirmTrx, opts ...grpc.CallOption) (*MyResponse, error)
	ConfirmTrxByPass(ctx context.Context, in *ConfirmTrxByPassMessage, opts ...grpc.CallOption) (*MyResponse, error)
	ConfirmSyncTrxToCloud(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryPayment(ctx context.Context, in *RequestInquiryPayment, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryWithCardP3(ctx context.Context, in *RequestInquiryWithCardP3, opts ...grpc.CallOption) (*MyResponse, error)
	InquiryPaymentP3(ctx context.Context, in *RequestInquiryPaymentP3, opts ...grpc.CallOption) (*MyResponse, error)
	GetTrxListForDocDate(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error)
	UpdateStatusManualTrx(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error)
	FindTrxOutstandingByIndex(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error)
	UpdateProductPrice(ctx context.Context, in *RequestUpdateProductPrice, opts ...grpc.CallOption) (*MyResponse, error)
	RegisterMember(ctx context.Context, in *RequestRegistrationMemberLocal, opts ...grpc.CallOption) (*MyResponse, error)
	DecryptMKey(ctx context.Context, in *Decrypt, opts ...grpc.CallOption) (*MyResponse, error)
	UpdateAutoClearTrx(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error)
	ConfirmTrxP3(ctx context.Context, in *RequestConfirmTrx, opts ...grpc.CallOption) (*MyResponse, error)
}

type trxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrxServiceClient(cc grpc.ClientConnInterface) TrxServiceClient {
	return &trxServiceClient{cc}
}

func (c *trxServiceClient) AddTrxWithCard(ctx context.Context, in *RequestTrxCheckin, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_AddTrxWithCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) AddTrxWithoutCard(ctx context.Context, in *RequestTrxCheckInWithoutCard, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_AddTrxWithoutCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryTrxWithoutCard(ctx context.Context, in *RequestInquiryWithoutCard, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_InquiryTrxWithoutCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryTrxWithCard(ctx context.Context, in *RequestInquiryWithCard, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_InquiryTrxWithCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) ConfirmTrx(ctx context.Context, in *RequestConfirmTrx, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_ConfirmTrx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) ConfirmTrxByPass(ctx context.Context, in *ConfirmTrxByPassMessage, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_ConfirmTrxByPass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) ConfirmSyncTrxToCloud(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_ConfirmSyncTrxToCloud_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryPayment(ctx context.Context, in *RequestInquiryPayment, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_InquiryPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryWithCardP3(ctx context.Context, in *RequestInquiryWithCardP3, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_InquiryWithCardP3_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) InquiryPaymentP3(ctx context.Context, in *RequestInquiryPaymentP3, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_InquiryPaymentP3_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) GetTrxListForDocDate(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_GetTrxListForDocDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) UpdateStatusManualTrx(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_UpdateStatusManualTrx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) FindTrxOutstandingByIndex(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_FindTrxOutstandingByIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) UpdateProductPrice(ctx context.Context, in *RequestUpdateProductPrice, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_UpdateProductPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) RegisterMember(ctx context.Context, in *RequestRegistrationMemberLocal, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_RegisterMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) DecryptMKey(ctx context.Context, in *Decrypt, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_DecryptMKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) UpdateAutoClearTrx(ctx context.Context, in *Param, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_UpdateAutoClearTrx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) ConfirmTrxP3(ctx context.Context, in *RequestConfirmTrx, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, TrxService_ConfirmTrxP3_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrxServiceServer is the server API for TrxService service.
// All implementations must embed UnimplementedTrxServiceServer
// for forward compatibility
type TrxServiceServer interface {
	AddTrxWithCard(context.Context, *RequestTrxCheckin) (*MyResponse, error)
	AddTrxWithoutCard(context.Context, *RequestTrxCheckInWithoutCard) (*MyResponse, error)
	InquiryTrxWithoutCard(context.Context, *RequestInquiryWithoutCard) (*MyResponse, error)
	InquiryTrxWithCard(context.Context, *RequestInquiryWithCard) (*MyResponse, error)
	ConfirmTrx(context.Context, *RequestConfirmTrx) (*MyResponse, error)
	ConfirmTrxByPass(context.Context, *ConfirmTrxByPassMessage) (*MyResponse, error)
	ConfirmSyncTrxToCloud(context.Context, *Empty) (*MyResponse, error)
	InquiryPayment(context.Context, *RequestInquiryPayment) (*MyResponse, error)
	InquiryWithCardP3(context.Context, *RequestInquiryWithCardP3) (*MyResponse, error)
	InquiryPaymentP3(context.Context, *RequestInquiryPaymentP3) (*MyResponse, error)
	GetTrxListForDocDate(context.Context, *Param) (*MyResponse, error)
	UpdateStatusManualTrx(context.Context, *Param) (*MyResponse, error)
	FindTrxOutstandingByIndex(context.Context, *Param) (*MyResponse, error)
	UpdateProductPrice(context.Context, *RequestUpdateProductPrice) (*MyResponse, error)
	RegisterMember(context.Context, *RequestRegistrationMemberLocal) (*MyResponse, error)
	DecryptMKey(context.Context, *Decrypt) (*MyResponse, error)
	UpdateAutoClearTrx(context.Context, *Param) (*MyResponse, error)
	ConfirmTrxP3(context.Context, *RequestConfirmTrx) (*MyResponse, error)
	mustEmbedUnimplementedTrxServiceServer()
}

// UnimplementedTrxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrxServiceServer struct {
}

func (UnimplementedTrxServiceServer) AddTrxWithCard(context.Context, *RequestTrxCheckin) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrxWithCard not implemented")
}
func (UnimplementedTrxServiceServer) AddTrxWithoutCard(context.Context, *RequestTrxCheckInWithoutCard) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrxWithoutCard not implemented")
}
func (UnimplementedTrxServiceServer) InquiryTrxWithoutCard(context.Context, *RequestInquiryWithoutCard) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryTrxWithoutCard not implemented")
}
func (UnimplementedTrxServiceServer) InquiryTrxWithCard(context.Context, *RequestInquiryWithCard) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryTrxWithCard not implemented")
}
func (UnimplementedTrxServiceServer) ConfirmTrx(context.Context, *RequestConfirmTrx) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTrx not implemented")
}
func (UnimplementedTrxServiceServer) ConfirmTrxByPass(context.Context, *ConfirmTrxByPassMessage) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTrxByPass not implemented")
}
func (UnimplementedTrxServiceServer) ConfirmSyncTrxToCloud(context.Context, *Empty) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmSyncTrxToCloud not implemented")
}
func (UnimplementedTrxServiceServer) InquiryPayment(context.Context, *RequestInquiryPayment) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryPayment not implemented")
}
func (UnimplementedTrxServiceServer) InquiryWithCardP3(context.Context, *RequestInquiryWithCardP3) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryWithCardP3 not implemented")
}
func (UnimplementedTrxServiceServer) InquiryPaymentP3(context.Context, *RequestInquiryPaymentP3) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryPaymentP3 not implemented")
}
func (UnimplementedTrxServiceServer) GetTrxListForDocDate(context.Context, *Param) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrxListForDocDate not implemented")
}
func (UnimplementedTrxServiceServer) UpdateStatusManualTrx(context.Context, *Param) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusManualTrx not implemented")
}
func (UnimplementedTrxServiceServer) FindTrxOutstandingByIndex(context.Context, *Param) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTrxOutstandingByIndex not implemented")
}
func (UnimplementedTrxServiceServer) UpdateProductPrice(context.Context, *RequestUpdateProductPrice) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductPrice not implemented")
}
func (UnimplementedTrxServiceServer) RegisterMember(context.Context, *RequestRegistrationMemberLocal) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMember not implemented")
}
func (UnimplementedTrxServiceServer) DecryptMKey(context.Context, *Decrypt) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptMKey not implemented")
}
func (UnimplementedTrxServiceServer) UpdateAutoClearTrx(context.Context, *Param) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoClearTrx not implemented")
}
func (UnimplementedTrxServiceServer) ConfirmTrxP3(context.Context, *RequestConfirmTrx) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTrxP3 not implemented")
}
func (UnimplementedTrxServiceServer) mustEmbedUnimplementedTrxServiceServer() {}

// UnsafeTrxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrxServiceServer will
// result in compilation errors.
type UnsafeTrxServiceServer interface {
	mustEmbedUnimplementedTrxServiceServer()
}

func RegisterTrxServiceServer(s grpc.ServiceRegistrar, srv TrxServiceServer) {
	s.RegisterService(&TrxService_ServiceDesc, srv)
}

func _TrxService_AddTrxWithCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTrxCheckin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).AddTrxWithCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_AddTrxWithCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).AddTrxWithCard(ctx, req.(*RequestTrxCheckin))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_AddTrxWithoutCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTrxCheckInWithoutCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).AddTrxWithoutCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_AddTrxWithoutCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).AddTrxWithoutCard(ctx, req.(*RequestTrxCheckInWithoutCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryTrxWithoutCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryWithoutCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryTrxWithoutCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_InquiryTrxWithoutCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryTrxWithoutCard(ctx, req.(*RequestInquiryWithoutCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryTrxWithCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryWithCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryTrxWithCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_InquiryTrxWithCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryTrxWithCard(ctx, req.(*RequestInquiryWithCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_ConfirmTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestConfirmTrx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).ConfirmTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_ConfirmTrx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).ConfirmTrx(ctx, req.(*RequestConfirmTrx))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_ConfirmTrxByPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTrxByPassMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).ConfirmTrxByPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_ConfirmTrxByPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).ConfirmTrxByPass(ctx, req.(*ConfirmTrxByPassMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_ConfirmSyncTrxToCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).ConfirmSyncTrxToCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_ConfirmSyncTrxToCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).ConfirmSyncTrxToCloud(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_InquiryPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryPayment(ctx, req.(*RequestInquiryPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryWithCardP3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryWithCardP3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryWithCardP3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_InquiryWithCardP3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryWithCardP3(ctx, req.(*RequestInquiryWithCardP3))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_InquiryPaymentP3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInquiryPaymentP3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).InquiryPaymentP3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_InquiryPaymentP3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).InquiryPaymentP3(ctx, req.(*RequestInquiryPaymentP3))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_GetTrxListForDocDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).GetTrxListForDocDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_GetTrxListForDocDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).GetTrxListForDocDate(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_UpdateStatusManualTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).UpdateStatusManualTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_UpdateStatusManualTrx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).UpdateStatusManualTrx(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_FindTrxOutstandingByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).FindTrxOutstandingByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_FindTrxOutstandingByIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).FindTrxOutstandingByIndex(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_UpdateProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateProductPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).UpdateProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_UpdateProductPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).UpdateProductPrice(ctx, req.(*RequestUpdateProductPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_RegisterMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegistrationMemberLocal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).RegisterMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_RegisterMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).RegisterMember(ctx, req.(*RequestRegistrationMemberLocal))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_DecryptMKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Decrypt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).DecryptMKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_DecryptMKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).DecryptMKey(ctx, req.(*Decrypt))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_UpdateAutoClearTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).UpdateAutoClearTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_UpdateAutoClearTrx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).UpdateAutoClearTrx(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_ConfirmTrxP3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestConfirmTrx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).ConfirmTrxP3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrxService_ConfirmTrxP3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).ConfirmTrxP3(ctx, req.(*RequestConfirmTrx))
	}
	return interceptor(ctx, in, info, handler)
}

// TrxService_ServiceDesc is the grpc.ServiceDesc for TrxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trx.TrxService",
	HandlerType: (*TrxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTrxWithCard",
			Handler:    _TrxService_AddTrxWithCard_Handler,
		},
		{
			MethodName: "AddTrxWithoutCard",
			Handler:    _TrxService_AddTrxWithoutCard_Handler,
		},
		{
			MethodName: "InquiryTrxWithoutCard",
			Handler:    _TrxService_InquiryTrxWithoutCard_Handler,
		},
		{
			MethodName: "InquiryTrxWithCard",
			Handler:    _TrxService_InquiryTrxWithCard_Handler,
		},
		{
			MethodName: "ConfirmTrx",
			Handler:    _TrxService_ConfirmTrx_Handler,
		},
		{
			MethodName: "ConfirmTrxByPass",
			Handler:    _TrxService_ConfirmTrxByPass_Handler,
		},
		{
			MethodName: "ConfirmSyncTrxToCloud",
			Handler:    _TrxService_ConfirmSyncTrxToCloud_Handler,
		},
		{
			MethodName: "InquiryPayment",
			Handler:    _TrxService_InquiryPayment_Handler,
		},
		{
			MethodName: "InquiryWithCardP3",
			Handler:    _TrxService_InquiryWithCardP3_Handler,
		},
		{
			MethodName: "InquiryPaymentP3",
			Handler:    _TrxService_InquiryPaymentP3_Handler,
		},
		{
			MethodName: "GetTrxListForDocDate",
			Handler:    _TrxService_GetTrxListForDocDate_Handler,
		},
		{
			MethodName: "UpdateStatusManualTrx",
			Handler:    _TrxService_UpdateStatusManualTrx_Handler,
		},
		{
			MethodName: "FindTrxOutstandingByIndex",
			Handler:    _TrxService_FindTrxOutstandingByIndex_Handler,
		},
		{
			MethodName: "UpdateProductPrice",
			Handler:    _TrxService_UpdateProductPrice_Handler,
		},
		{
			MethodName: "RegisterMember",
			Handler:    _TrxService_RegisterMember_Handler,
		},
		{
			MethodName: "DecryptMKey",
			Handler:    _TrxService_DecryptMKey_Handler,
		},
		{
			MethodName: "UpdateAutoClearTrx",
			Handler:    _TrxService_UpdateAutoClearTrx_Handler,
		},
		{
			MethodName: "ConfirmTrxP3",
			Handler:    _TrxService_ConfirmTrxP3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trx.proto",
}
